!function(e){function t(t){for(var s,o,i=t[0],a=t[1],r=t[2],l=0,c=[];l<i.length;l++)o=i[l],I[o]&&c.push(I[o][0]),I[o]=0;for(s in a)Object.prototype.hasOwnProperty.call(a,s)&&(e[s]=a[s]);for(H&&H(t);c.length;)c.shift()();return C.push.apply(C,r||[]),n()}function n(){for(var e,t=0;t<C.length;t++){for(var n=C[t],s=!0,o=1;o<n.length;o++){var i=n[o];0!==I[i]&&(s=!1)}s&&(C.splice(t--,1),e=E(E.s=n[0]))}return e}var s=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,t){if(!x[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(m[n]=t[n]);0==--v&&0===y&&S()}(e,t),s&&s(e,t)};var o,i=!0,a="30659724a6be6e18dad3",r=1e4,l={},c=[],p=[];var u=[],d="idle";function h(e){d=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var f,m,g,v=0,y=0,b={},w={},x={};function k(e){return+e+""===e?+e:e}function j(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return i=e,h("check"),(t=r,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var s=new XMLHttpRequest,o=E.p+""+a+".hot-update.json";s.open("GET",o,!0),s.timeout=t,s.send(null)}catch(e){return n(e)}s.onreadystatechange=function(){if(4===s.readyState)if(0===s.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===s.status)e();else if(200!==s.status&&304!==s.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(s.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return h("idle"),null;w={},b={},x=e.c,g=e.h,h("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});for(var n in m={},I)P(n);return"prepare"===d&&0===y&&0===v&&S(),t});var t}function P(e){x[e]?(w[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=E.p+""+e+"."+a+".hot-update.js",t.appendChild(n)}(e)):b[e]=!0}function S(){h("ready");var e=f;if(f=null,e)if(i)Promise.resolve().then(function(){return T(i)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&t.push(k(n));e.resolve(t)}}function T(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,s,o,i,r;function p(e){for(var t=[e],n={},s=t.slice().map(function(e){return{chain:[e],id:e}});s.length>0;){var o=s.pop(),a=o.id,r=o.chain;if((i=M[a])&&!i.hot._selfAccepted){if(i.hot._selfDeclined)return{type:"self-declined",chain:r,moduleId:a};if(i.hot._main)return{type:"unaccepted",chain:r,moduleId:a};for(var l=0;l<i.parents.length;l++){var c=i.parents[l],p=M[c];if(p){if(p.hot._declinedDependencies[a])return{type:"declined",chain:r.concat([c]),moduleId:a,parentId:c};-1===t.indexOf(c)&&(p.hot._acceptedDependencies[a]?(n[c]||(n[c]=[]),u(n[c],[a])):(delete n[c],t.push(c),s.push({chain:r.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function u(e,t){for(var n=0;n<t.length;n++){var s=t[n];-1===e.indexOf(s)&&e.push(s)}}t=t||{};var f={},v=[],y={},b=function(){console.warn("[HMR] unexpected require("+j.moduleId+") to disposed module")};for(var w in m)if(Object.prototype.hasOwnProperty.call(m,w)){var j;r=k(w);var P=!1,S=!1,T=!1,C="";switch((j=m[w]?p(r):{type:"disposed",moduleId:w}).chain&&(C="\nUpdate propagation: "+j.chain.join(" -> ")),j.type){case"self-declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(P=new Error("Aborted because of self decline: "+j.moduleId+C));break;case"declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(P=new Error("Aborted because of declined dependency: "+j.moduleId+" in "+j.parentId+C));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(j),t.ignoreUnaccepted||(P=new Error("Aborted because "+r+" is not accepted"+C));break;case"accepted":t.onAccepted&&t.onAccepted(j),S=!0;break;case"disposed":t.onDisposed&&t.onDisposed(j),T=!0;break;default:throw new Error("Unexception type "+j.type)}if(P)return h("abort"),Promise.reject(P);if(S)for(r in y[r]=m[r],u(v,j.outdatedModules),j.outdatedDependencies)Object.prototype.hasOwnProperty.call(j.outdatedDependencies,r)&&(f[r]||(f[r]=[]),u(f[r],j.outdatedDependencies[r]));T&&(u(v,[j.moduleId]),y[r]=b)}var A,D=[];for(s=0;s<v.length;s++)r=v[s],M[r]&&M[r].hot._selfAccepted&&D.push({module:r,errorHandler:M[r].hot._selfAccepted});h("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete I[e]}(e)});for(var _,H,O=v.slice();O.length>0;)if(r=O.pop(),i=M[r]){var W={},N=i.hot._disposeHandlers;for(o=0;o<N.length;o++)(n=N[o])(W);for(l[r]=W,i.hot.active=!1,delete M[r],delete f[r],o=0;o<i.children.length;o++){var $=M[i.children[o]];$&&((A=$.parents.indexOf(r))>=0&&$.parents.splice(A,1))}}for(r in f)if(Object.prototype.hasOwnProperty.call(f,r)&&(i=M[r]))for(H=f[r],o=0;o<H.length;o++)_=H[o],(A=i.children.indexOf(_))>=0&&i.children.splice(A,1);for(r in h("apply"),a=g,y)Object.prototype.hasOwnProperty.call(y,r)&&(e[r]=y[r]);var L=null;for(r in f)if(Object.prototype.hasOwnProperty.call(f,r)&&(i=M[r])){H=f[r];var F=[];for(s=0;s<H.length;s++)if(_=H[s],n=i.hot._acceptedDependencies[_]){if(-1!==F.indexOf(n))continue;F.push(n)}for(s=0;s<F.length;s++){n=F[s];try{n(H)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:r,dependencyId:H[s],error:e}),t.ignoreErrored||L||(L=e)}}}for(s=0;s<D.length;s++){var B=D[s];r=B.module,c=[r];try{E(r)}catch(e){if("function"==typeof B.errorHandler)try{B.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:r,error:n,originalError:e}),t.ignoreErrored||L||(L=n),L||(L=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:r,error:e}),t.ignoreErrored||L||(L=e)}}return L?(h("fail"),Promise.reject(L)):(h("idle"),new Promise(function(e){e(v)}))}var M={},I={0:0},C=[];function E(t){if(M[t])return M[t].exports;var n=M[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:o!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var s=0;s<e.length;s++)t._acceptedDependencies[e[s]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:j,apply:T,status:function(e){if(!e)return d;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:l[e]};return o=void 0,t}(t),parents:(p=c,c=[],p),children:[]};return e[t].call(n.exports,n,n.exports,function(e){var t=M[e];if(!t)return E;var n=function(n){return t.hot.active?(M[n]?-1===M[n].parents.indexOf(e)&&M[n].parents.push(e):(c=[e],o=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),c=[]),E(n)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return E[e]},set:function(t){E[e]=t}}};for(var i in E)Object.prototype.hasOwnProperty.call(E,i)&&"e"!==i&&Object.defineProperty(n,i,s(i));return n.e=function(e){return"ready"===d&&h("prepare"),y++,E.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===d&&(b[e]||P(e),0===y&&0===v&&S())}},n}(t)),n.l=!0,n.exports}E.m=e,E.c=M,E.d=function(e,t,n){E.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},E.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},E.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return E.d(t,"a",t),t},E.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},E.p="",E.h=function(){return a};var A=window.webpackJsonp=window.webpackJsonp||[],D=A.push.bind(A);A.push=t,A=A.slice();for(var _=0;_<A.length;_++)t(A[_]);var H=D;C.push([17,1]),n()}([,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=o(n(21));o(n(22)),o(n(23));function o(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return s.default.initialize({margin:.1,minScale:.2,maxScale:1.5,controlls:!0,progress:!0,keyboard:!0,fragments:!0,height:"100%",width:"100%",slideNumber:!0,history:!0})}},,,function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Contact Me</h2><a href="https://www.linkedin.com/in/evan-williams-75485533"><img src="./assets/linkedin.png"></a><a href="https://twitter.com/angular_evan"><img src="./assets/twitter.png"></a><a href="https://medium.com/@angular_evan/"><h2>My Blog</h2></a></section></section>'}},,function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Current Order of ES6 Topics</h2><p class="fragment">Subject to Change</p></section><section><ol><li><a href="/dist/index.html?sub-app=es6-intro">ES6 Introduction - </a><a href="https://www.youtube.com/watch?v=Q39IWxrla8M">Video</a></li><li><a href="/dist/index.html?sub-app=es6-variable-declaration">Variable Declarations - </a><a href="https://www.youtube.com/watch?v=ARPy03C5nyE">Video</a></li><li><a href="/dist/index.html?sub-app=es6-new-methods">New Methods on Pre-existing Prototypes - </a><a href="https://www.youtube.com/watch?v=wUPqvLiyiUQ">Video</a></li><li><a href="/dist/index.html?sub-app=es6-arrow-functions">Arrow Functions - </a><a href="https://www.youtube.com/watch?v=7XFyqYR6Tr8">Video</a></li><li><a href="/dist/index.html?sub-app=es6-classes">Classes - </a><a href="https://www.youtube.com/watch?v=uRuP53zTHCQ">Video</a></li><li><a href="/dist/index.html?sub-app=es6-default-parameters">Parameter Defaults - </a><a href="https://www.youtube.com/watch?v=GiGuzi4SqQA">Video</a></li><li><a href="/dist/index.html?sub-app=es6-promises">Promises -</a><a href="https://www.youtube.com/watch?v=AyNxPwOZPHY">Video</a></li><li><a href="/dist/index.html?sub-app=es6-modules">Modules -</a><a href="https://www.youtube.com/watch?v=mpVBps_mtLI">Video</a></li></ol></section></section>'}},,,,function(e,t,n){(e.exports=n(8)(!1)).push([e.i,"pre {\n  font-size: 30px !important; }\n\nh1 ~ h1,\nh1 ~ h2,\nh1 ~ h3,\nh1 ~ h4,\nh1 ~ h5,\nh1 ~ h6,\nh2 ~ h1,\nh2 ~ h2,\nh2 ~ h3,\nh2 ~ h4,\nh2 ~ h5,\nh2 ~ h6,\nh3 ~ h1,\nh3 ~ h2,\nh3 ~ h3,\nh3 ~ h4,\nh3 ~ h5,\nh3 ~ h6,\nh4 ~ h1,\nh4 ~ h2,\nh4 ~ h3,\nh4 ~ h4,\nh4 ~ h5,\nh4 ~ h6,\nh5 ~ h1,\nh5 ~ h2,\nh5 ~ h3,\nh5 ~ h4,\nh5 ~ h5,\nh5 ~ h6,\nh6 ~ h1,\nh6 ~ h2,\nh6 ~ h3,\nh6 ~ h4,\nh6 ~ h5,\nh6 ~ h6 {\n  margin-top: 20px !important; }\n\nul {\n  width: 85%; }\n",""])},,,function(e,t,n){(e.exports=n(8)(!1)).push([e.i,".reveal .slides #camponile {\n  height: 300px;\n  width: auto; }\n\n.reveal .slides .intro img {\n  width: 95%;\n  height: auto; }\n\n.reveal .slides img {\n  max-height: 600px !important;\n  border: none !important; }\n\n.reveal .slides .who-am-i img {\n  max-height: 400px !important; }\n",""])},function(e,t,n){(e.exports=n(8)(!1)).push([e.i,"#webpack-logo-1000ft {\n  width: 50px;\n  height: auto; }\n\n#webpack-logo-100ft {\n  width: 500px;\n  height: auto; }\n",""])},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Current Order of Typescript Topics</h2></section><section><ol><li><a href="/dist/index.html?sub-app=ts-intro">Typescript Introduction</a></li><li><a href="/dist/index.html?sub-app=ts-types">Types</a></li><li><a href="/dist/index.html?sub-app=ts-classes">Classes</a></li><li><a href="/dist/index.html?sub-app=ts-interfaces">Interfaces</a></li><li><a href="/dist/index.html?sub-app=ts-generics">Generics</a></li><li><a href="/dist/index.html?sub-app=ts-decorators">Decorators</a></li><li><a href="/dist/index.html?sub-app=ts-misc">Misc.</a></li><li><a href="/dist/index.html?sub-app=ts-definition-files">Typescript Definition Files</a></li><li><a href="/dist/index.html?sub-app=ts-implementation">Implementation of Typescript</a></li></ol></section></section>'}},,function(e,t,n){"use strict";n(18);var s=X(n(20)),o=X(n(25)),i=X(n(31)),a=X(n(32)),r=X(n(36)),l=X(n(37)),c=X(n(44)),p=X(n(46)),u=X(n(55)),d=X(n(56)),h=X(n(61)),f=X(n(62)),m=X(n(69)),g=X(n(70)),v=X(n(77)),y=X(n(78)),b=X(n(82)),w=X(n(83)),x=X(n(88)),k=X(n(89)),j=X(n(92)),P=X(n(93)),S=X(n(100)),T=X(n(101)),M=X(n(107)),I=X(n(108)),C=X(n(122)),E=X(n(123)),A=X(n(128)),D=X(n(129)),_=X(n(133)),H=X(n(134)),O=X(n(140)),W=X(n(141)),N=X(n(145)),$=X(n(146)),L=X(n(154)),F=X(n(155)),B=X(n(160)),R=X(n(161)),z=X(n(170)),U=X(n(171)),q=X(n(177)),Y=X(n(178)),V=X(n(183)),J=X(n(184)),G=X(n(189)),Q=X(n(190)),Z=X(n(198)),K=X(n(199));function X(e){return e&&e.__esModule?e:{default:e}}var ee,te,ne,se={HelloWorld:{pug:o.default,js:s.default},Software:{pug:a.default,js:i.default},"NPM-init":{pug:l.default,js:r.default},webpack:{pug:p.default,js:c.default},"es6-intro":{pug:d.default,js:u.default},"es6-variable-declaration":{pug:f.default,js:h.default},"es6-new-methods":{pug:g.default,js:m.default},"es6-arrow-functions":{pug:y.default,js:v.default},"es6-classes":{pug:w.default,js:b.default},"es6-default-parameters":{pug:k.default,js:x.default},"es6-promises":{pug:P.default,js:j.default},"es6-modules":{pug:T.default,js:S.default},pug:{pug:I.default,js:M.default,context:{names:["Daniel","Jacob","Ben"]}},"ts-intro":{pug:E.default,js:C.default},"ts-types":{pug:D.default,js:A.default},"ts-classes":{pug:H.default,js:_.default},"smart-vs-dumb":{pug:W.default,js:O.default},"pug-lightning-talk":{pug:$.default,js:N.default},"yarn-lightning-talk":{pug:F.default,js:L.default},"angular-component-lifecycle-hooks":{pug:R.default,js:B.default},"dyson-mocks":{pug:U.default,js:z.default},modules:{pug:Y.default,js:q.default},"modules-best-practices":{pug:J.default,js:V.default},"dynamic-angular-modules":{pug:Q.default,js:G.default},hsa:{pug:K.default,js:Z.default}}[(ee="sub-app",te=window.location.search.substring(1).split("&").map(function(e){var t=e.split("=");return{key:decodeURIComponent(t[0]),value:decodeURIComponent(t[1])}}).find(function(e){return e.key===ee}),te?te.value:void 0)];se&&(ne=se,document.querySelector("body").appendChild(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),s=1;s<t;s++)n[s-1]=arguments[s];var o=document.createElement("div");return o.innerHTML=e.apply(void 0,n),o.firstChild}(ne.pug,ne.context)),ne.js())},function(e,t,n){var s=n(10);"string"==typeof s&&(s=[[e.i,s,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},i=n(9)(s,o);s.locals&&(e.exports=s.locals),e.hot.accept(10,function(t){!function(){var t=n(10);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,s=0;for(n in e){if(!t||e[n]!==t[n])return!1;s++}for(n in t)s--;return 0===s}(s.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}()}),e.hot.dispose(function(){i()})},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=o(n(1));o(n(24));function o(e){return e&&e.__esModule?e:{default:e}}t.default=s.default},,,,function(e,t,n){var s=n(13);"string"==typeof s&&(s=[[e.i,s,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},i=n(9)(s,o);s.locals&&(e.exports=s.locals),e.hot.accept(13,function(t){!function(){var t=n(13);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,s=0;for(n in e){if(!t||e[n]!==t[n])return!1;s++}for(n in t)s--;return 0===s}(s.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}()}),e.hot.dispose(function(){i()})},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Hello, world!</h2></section></section>'+(null==(t=n(27).call(this,e))?"":t)+(null==(t=n(28).call(this,e))?"":t)+(null==(t=n(29).call(this,e))?"":t)+(null==(t=n(30).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t){},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section class="who-am-i"><section><h1>Who am I?</h1></section><section><h3>Evan Williams</h3></section><section data-markdown><h3>Programming since 6th grade</h3><pre>if(location == \'home\') {\n  if(directionChosen == \'north\') {\n    print(\'You see a wild hog appear\');\n  }\n  if(directionChosen == \'south\') {\n    print(\'You enter the town square, only to be robbed blind!\');\n  }\n  if(directionChosen == \'east\') {\n    print(\'You see your home off in the distance\');\n    if(directionChosen == \'east\') {\n      print(\'You reach your doorstep\');\n    }\n  }\n}</pre></section><section><h3>Graduate of Iowa State University</h3><img id="camponile" src="assets/hello-world/camponile.jpg"></section><section><h3>Work History</h3><h4 class="fragment">McDonalds!</h4><h4 class="fragment">Intern at Fortune 500 insurance company</h4><ul><li class="fragment">Wrote Java 1.5</li><li class="fragment">REST end point for Document Storage</li><li class="fragment">Automated testing</li></ul></section><section><h3>Current Position</h3><ul><li class="fragment">Wrote Java JMS services</li><li class="fragment">Built a Wicket website for said services</li><li class="fragment">Moved on to write a customer portal in Liferay using jQuery</li><li class="fragment">Began work on Angular applications</li></ul></section><section><img src="assets/hello-world/me_1.jpg"></section><section><img src="assets/hello-world/me_2.jpg"></section><section><img src="assets/hello-world/me_3.jpg"></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Angular Experience</h2><ul><li class="fragment">Developed 7 applications</li><li class="fragment">2 external applications (50,000 users)</li><li class="fragment">3 years of full time experience</li><li class="fragment">Participate in UI Best Practices group, determining direction of UI development</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Teaching Experience</h2><ul><li class="fragment">Taught Angular training, replacing a vendor trainer</li><li class="fragment">ES6 syntax</li><li class="fragment">SASS</li><li class="fragment">Webpack</li><li class="fragment">Jade (now Pug)</li><li class="fragment">and many more!</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>What will you learn watching my videos?*</h2><ul><li class="fragment">Web Development process (tools, debugging, frameworks, ES6)</li><li class="fragment">Angular, most importantly</li><li class="fragment">Angular best practices</li><li class="fragment">SASS (responsive design using Foundation)</li></ul><h6 class="fragment">* Topics are subject to change, I like to go on tangents!</h6><h6 class="fragment">** I currently do not have a schedule or order laid out, either</h6></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Software Being Used</h2></section></section>'+(null==(t=n(33).call(this,e))?"":t)+(null==(t=n(34).call(this,e))?"":t)+(null==(t=n(35).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>NodeJS</h2><a href="https://nodejs.org/en/" target="_blank"><img src="assets/software/nodejs-new-white-pantone.png"></a></section><section><h2>What is NodeJS?</h2><ul><li class="fragment">Cross platform runtime environment (think JVM)</li><li class="fragment">Developed for writing server-side applications</li><li class="fragment">Modules are written in Javascript</li></ul></section><section><h2>Why are we using it?</h2><ul><li class="fragment">Modules written on node allow for significantly different development cycle</li><li class="fragment">Able to write applications in Javascript</li><li class="fragment">When we start working with data calls, we\'ll utilize a NodeJS backend for ease of development</li></ul></section><section><h2>Installation</h2><ol><li class="fragment">Download &amp; Install</li><li class="fragment">Ensure you add it to your PATH variable</li><li class="fragment">Verify installation using <code>node --version</code> in a command window</li></ol></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>NPM</h2><a href="https://npmjs.com"><img src="assets/software/npm.png"></a></section><section><h2>What is NPM?</h2><ul><li class="fragment">Package Manager for Javascript</li><li class="fragment">Similar to the concept of Maven in Java</li><li class="fragment">Installs dependencies that will help build applications, as well as develop them</li></ul></section><section><h2>Why are we using it?</h2><ul><li class="fragment">A great way to manage dependencies</li><li class="fragment">All dependencies can be explicitly declared &amp; managed by NPM</li><li class="fragment">Many of our build tools would be extremely difficult to manage without it</li></ul></section><section><h2>Installation Verification</h2><p class="fragment">NPM is a default script included in NodeJS</p><p class="fragment"><code>npm --version</code> should respond with x.x.x version (currently 3.7.2)</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>VS Code</h2><a href="https://code.visualstudio.com/"><img src="assets/software/vscode.png"></a></section><section><h2>What is VS Code?</h2><ul><li class="fragment">Visual Studios Code, Microsoft open source project</li><li class="fragment">IDE for software development</li><li class="fragment">Provides GIT interactions, third party plugins, auto complete etc.</li></ul></section><section><h2>Why are we using it?</h2><ul><li class="fragment">It\'s free</li><li class="fragment">It has all the features of a good web IDE</li></ul></section><section><h2>Installation</h2><ul><li class="fragment">Download &amp; install on your machine</li><li class="fragment">Open the application</li><li class="fragment">Hit <code>Ctrl + `</code> to open a command prompt inside the application</li><li class="fragment">You should be able to verify NPM &amp; NodeJS are both accessible</li></ul></section><section><h2>Extensions Being Used</h2><ul><li class="fragment">ESLint</li><li class="fragment">Dracula Syntax Theme</li><li class="fragment">puglint</li><li class="fragment">Debugger For Chrome</li></ul></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Anatomy of an NPM <code>package.json</code> File</h2></section></section>'+(null==(t=n(38).call(this,e))?"":t)+(null==(t=n(39).call(this,e))?"":t)+(null==(t=n(40).call(this,e))?"":t)+(null==(t=n(41).call(this,e))?"":t)+(null==(t=n(42).call(this,e))?"":t)+(null==(t=n(43).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Generate an NPM Baseline</h2></section><section><h2><code></code> npm init</h2><p class="fragment">The above command will begin the initialization process</p><p class="fragment">It will ask you to provide the following</p><ul><li class="fragment">The name of your project (defaults to your directory name)</li><li class="fragment">Version (defaults to 1.0.0, see <a href="http://semver.org/" target="_blank">this link for more details</a>)</li><li class="fragment">Description</li><li class="fragment">Entry Point (this is where your application lives)</li><li class="fragment">Test Command (aka if you have a test suite, how to execute it)</li><li class="fragment">git repository (if you perform a <code>git init</code> prior to this step, it will pick up the repo)</li><li class="fragment">Keywords (for NPM searching)</li><li class="fragment">Author</li><li class="fragment">License (defaults to <a href="https://opensource.org/licenses/ISC">ISC</a>)</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>NPM Dependencies</h2></section><section><h2>Installation</h2><p class="fragment"><code>npm install dependency-name</code> - Performs a one time installation of a module</p><p class="fragment"><code>npm install -g dependency-name</code> - Installs to your global NPM installation</p><p class="fragment"><code>npm install --save dependency-name</code> - Installs to your project &amp; and updates the <strong>dependencies</strong> list</p><p class="fragment"><code>npm install --save-dev dependency-name</code> - Installs to your project &amp; and updates the <strong>devDependencies</strong> list</p></section><section><h2>Dependencies vs. Dev Dependencies</h2><pre>"dependencies": {\n    "reveal": "0.0.4"\n},\n"devDependencies": {\n    "babel-core": "^6.13.2",\n    ...\n    "webpack": "^1.13.2",\n    "webpack-dev-server": "^1.14.1"\n}</pre><p class="fragment">Dependencies are intended to be packaged with your application and are needed to execute the application by other modules</p><p class="fragment">Dev Dependencies are used in order to develop or test your application</p></section><section><h2>Starting with a pre-written project</h2><p class="fragment">Your first step is to perform an <npm>install</npm></p><p class="fragment">Both dev dependencies and project dependencies will be installed</p></section><section><h2>Peer Dependencies</h2><p class="fragment">Most NPM modules will have dependencies of their own</p><p class="fragment">Luckily, NPM handles that for us! It will not only download your dependency, but its dependencies, as well.</p><p class="fragment">All peer dependencies will be sibling directories of your dependency</p><p class="fragment">You will not need to explicitly denote those modules in the <code>package.json</code> file.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Dependency Versioning</h2></section><section><h2>^</h2><p class="fragment">Indicates that any minor version of the dependency will do</p><p class="fragment"><code>^3.2.5</code> means anything <code>^3.x.x</code> is valid</p></section><section><h2>~</h2><p class="fragment">Indicates that any patch version of the dependency is acceptable</p><p class="fragment"><code>~3.2.5</code> means anything <code>^3.2.x</code> is valid</p></section><section><h2>No Proceeding Modifier</h2><p class="fragment">This means this version, and this version only, is acceptable</p><p class="fragment"><code>3.2.5</code> means ONLY <code>3.2.5</code> is valid</p></section><section><h2>Why can\'t I automatically pick up <strong>major</strong> version changes?</h2><p class="fragment">According to SEMVER, major changes are those that cause a breaking change</p><p class="fragment">This means changes to an API or syntax that breaks reverse compatibility</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Scripts</h2></section><section><pre>"scripts": {\n    "test": "echo \\"Error: no test specified\\" &amp;&amp; exit 1",\n    "start": "webpack-dev-server",\n    "postinstall": "webpack"\n}</pre><p>These are used to abstract the underlying dependencies</p><p class="fragment">For instance, if your testing framework changes from mocha to jasmine, your test command will still be <strong>npm test</strong></p><p class="fragment">Available npm-scripts properties can be found <a href="https://docs.npmjs.com/misc/scripts">here</a></p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Sharing your NPM module</h2></section><section><code>npm publish</code><p class="fragment">This will make your module available at <code>https://www.npmjs.com/package/{your package name}</code></p><p class="fragment">Other NPM users can now npm install your module!</p></section><section><h4>.npmignore</h4><p class="fragment">Similar to a <strong>.gitignore</strong> file, <strong>.npmignore</strong> will contain the files &amp; directories you do not want to publish.</p><p class="fragment">Your <strong>.npmignore</strong> file should, at minimum, contain <strong>/node_modules/</strong>. Those will be installed when an <code>npm install</code> is executed.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Other Commands</h2></section><section><ul><li class="fragment"><code>npm remove dependency-name</code> - Removes the dependency from the application</li><li class="fragment"><code>npm prune</code> - Removes undeclared dependencies</li><li class="fragment"><code>npm link</code> - Points the NPM registry to your local directory for the package name (local testing)</li><li class="fragment"><code>npm shrinkwrap</code> - Creates a file that locks down the version numbers currently installed</li></ul></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};n(45),t.default=i.default},function(e,t,n){var s=n(14);"string"==typeof s&&(s=[[e.i,s,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},i=n(9)(s,o);s.locals&&(e.exports=s.locals),e.hot.accept(14,function(t){!function(){var t=n(14);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,s=0;for(n in e){if(!t||e[n]!==t[n])return!1;s++}for(n in t)s--;return 0===s}(s.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}()}),e.hot.dispose(function(){i()})},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Webpack</h2><h6 class="fragment">and all its glory</h6><h6 class="fragment">...and its confusion</h6></section></section>'+(null==(t=n(47).call(this,e))?"":t)+(null==(t=n(48).call(this,e))?"":t)+(null==(t=n(49).call(this,e))?"":t)+(null==(t=n(50).call(this,e))?"":t)+(null==(t=n(51).call(this,e))?"":t)+(null==(t=n(52).call(this,e))?"":t)+(null==(t=n(53).call(this,e))?"":t)+(null==(t=n(54).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>What is Webpack?</h2></section><section><h2>1000 foot view</h2><img id="webpack-logo-1000ft" src="assets/webpack/webpack-logo.jpg"></section><section><p>Webpack is a module bundler for Javascript applications. It is an NPM module that we will be utilizing \nfor our development.</p><p class="fragment">Using loaders, processors, and plugins, it makes developing a complex application \nmuch simpler than it would be to manage global scoping and file load order.</p><p class="fragment">Previously, we had to load files in the proper order to ensure that global objects were \navailable to the scripts following a given script.</p><p class="fragment">For instance, if we\'re attemping to declare an <code>angular.module</code> in file A, and angular is \nloaded second as file B, angular will not be defined when file A is executed.</p></section><section><p>Previous solutions included means of managing file loading order by a term called <strong>blobs</strong>.</p><p class="fragment">These blobs were expressions that would match a given set of file patterns. They could then be loaded \nin the proper order. The problem is, certain blobs tie you to the framework you\'ve chosen (for instance,\nwe named angular module declarations <em>my-component.module.js</em>).</p></section><section><h2>Enter Webpack</h2><h6>100 foot view</h6><img id="webpack-logo-100ft" src="assets/webpack/webpack-logo.jpg"></section><section><p>To eliminate the messiness of the blobs, webpack allows for the use of ES6 modules.</p><p>These import &amp; export statements allow for the proper ordering of files (and makes for a much more\n easily understood application!)</p></section><section><h2>But wait!</h2><h2 class="fragment">There\'s more!</h2></section><section><p>Webpack also handles the following:</p><ul><li class="fragment">Stylings (css, sass, less etc.)</li><li class="fragment">Image loading</li><li class="fragment">Transpiling</li><li class="fragment">Source Mapping</li><li class="fragment">File copying &amp; Manipulation</li><li class="fragment">Hosting Content</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Loaders</h2><img src="assets/webpack/loading.gif"></section><section><h2>What is a loader?</h2><p class="fragment">A loader is a set of code that transforms a given source file in your application.</p><p class="fragment">They run in the Node environment and are typically installed via NPM.</p><p class="fragment">Loaders can be chained together to perform multiple transformations before being bundled into the application.</p><p class="fragment"><em>Note:</em> When installing loaders, they will typically be named something-<em>loader</em>. The <em>loader</em> portion is \ndropped when interacting with the loader.</p></section><section><h2>Examples of Loaders</h2><ul><li class="fragment">Babel - Used to transpile ES6 into ES5.</li><li class="fragment">CSS - Allows for the importing of CSS, which then gets appended to the head of your index page</li><li class="fragment">File - Copies over files from a given directory into the distribution directory</li><li class="fragment">Pug - Allows for the use of the Pug language</li></ul></section><section><h2>Anatomy of a Loader Configuration</h2><ul><li class="fragment"><strong>test</strong> - The regular expression used to identify the file</li><li class="fragment"><strong>loader</strong> - The loader string representing what loader to perform</li><li class="fragment"><strong>loaders</strong> - A collection of loader string declarations. Performed in order of declaration</li></ul></section><section><h2>A loader string</h2><p class="fragment">A loader string can be simply the name of the loader.</p><p class="fragment">It can also take query parameters. These query parameters modify the behavior of a given loader.</p></section><section><h2>Examples</h2><pre>{\n   test: /\\.pug$/,\n   loader: \'pug\'\n },\n {\n   test: /\\.(es6|js)$/,\n   exclude: /node_modules/,\n   loaders: [\n     \'babel\'\n   ]\n },\n {\n   test: /\\.(eot|svg|ttf|woff|woff2)$/,\n   loader: \'file?name=public/fonts/[name].[ext]\'\n }</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>Plugins</h2></section><section><p>A plugin is extremely similar to that of a loader. The difference is, a plugin applies to the bundled application, \nand not a particular file type. It can also listen into the build process of webpack.</p></section><section><p>Setting up plugins is much easier. You simply create a new instance of the plugin and configure it as you'd like, adding it \nto the plugins collection of the configuration (more on this in the next video).</p></section><section><h2>Examples of Plugins</h2><pre>plugins: [new HtmlWebpackPlugin({\n  title: 'Evan Williams AngularJS Tutorial Site',\n  template: 'src/index.pug'\n}), new CopyWebpackPlugin([{\n  from: './assets',\n  to: './assets/'\n}]), new webpack.optimize.OccurrenceOrderPlugin(), new webpack.HotModuleReplacementPlugin()]</pre></section></section>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>Resolve object</h2></section><section><p>The resolve object handles file names within your application. If you're attempting to import a file that is extremely \nlong, or you import many files from a directory, you can use this object to make that easier.</p></section><section><h2>root</h2><p class=\"fragment\">The root collection tells webpack to look for file names in a given set of directories. This is useful when you import many \nfiles from a directory.</p><pre class=\"fragment\">root: [\n  path.resolve('./src'),\n  path.resolve('./node_modules')\n]</pre></section><section><h2>alias</h2><p class=\"fragment\">Aliases are for mapping a given import statement to a specific file location. This is useful for projects that don't have a <code>main</code> property \nin their package.json file. Webpack attempts to load the main file described in the package.json for a given directory name. If it doesn't find it, \nyou'll get a <strong>module not found</strong> error.</p></section></section>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Output</h2></section><section><pre>{\n  path: path.resolve(__dirname, \'dist\'),\n  filename: \'bundle.js\'\n}</pre><p class="fragment">Path indicates the output directory.</p><p class="fragment"><strong>__dirname</strong> represents a NodeJS variable that stores the current directory in which the script is executing.</p><p class="fragment"><strong>path</strong> is another NPM module used to do path manipulation. Here, we are telling it to resolve the "dist" directory of our current directory.</p><p class="fragment">It will create the necessary folder if it does not exist.</p><p class="fragment">Finally, the filename is the output bundle from the webpack build process. We will call it "bundle.js" for now.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Sourcemaps</h2></section><section><h2>Overview</h2><p class="fragment">A source map, generally speaking, is a way to take a transpiled code base, and display the source that produced it.</p><p class="fragment">This can apply to more than just our Javascript, such as SASS and other transpiled code.</p></section><section><h2>Importance of Sourcemaps</h2><p class="fragment">Sourcemaps are important because you\'ll want to debug your source, not your transpiled code.</p><pre class="fragment">function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){}]);</pre><p class="fragment">This is extremely important with transpiled code, as Babel and all the other webpack processes will modify your code to a completely unreadable state.</p></section><section><h2>Implementing Sourcemaps in webpack</h2><p class="fragment"><strong>devtool</strong> property is what you will want to set in your webpack configuration.</p><p class="fragment">I personally use "source-map" as my devtool, as it provides the greatest functionality, and my application is currently jokingly small.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>How to install webpack</h2></section><section><h2>NPM</h2><p>Execute the command <code>npm install -g --save-dev webpack</code>.</p><p class="fragment">That\'s it. Remember, though, we want to <code>--save-dev</code> to ensure we note that \nwe are requiring that dependency for development purposes.</p><p class="fragment">Also note the <code>-g</code>. The webpack NPM module comes with an executable bat script that \nwill interface with your filesystem natively.</p><p class="fragment">If you execute <code>webpack</code> in your directory, you should see it output the usage information.\nWe\'ll expand on how to configure webpack in the next video.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Wrap-Up</h2></section><section><a href="https://webpack.github.io/docs/configuration.html">More information on Webpack Configurations</a></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>ES6 Introduction</h2></section></section>'+(null==(t=n(6).call(this,e))?"":t)+(null==(t=n(57).call(this,e))?"":t)+(null==(t=n(58).call(this,e))?"":t)+(null==(t=n(59).call(this,e))?"":t)+(null==(t=n(60).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>LiveScript, Javascript, ECMAScript, ES6, ES2015...</h2><p class="fragment">The history of Javascript</p></section><section><h2>Brief Overview</h2><p class="fragment">The language we know as Javascript today started out as LiveScript.</p><p class="fragment">It then defined its standard API as "ECMAScript".</p><p class="fragment">We still use the term ECMAScript to represent the standard, but the language is colloquially known as Javascript.</p></section><section><h2>ES5, ES6, and ESNext</h2><p class="fragment">ES5 was written in 2009. It\'s adoption has been rather slow, with only most browsers catching up in 2012.</p><p class="fragment">ES6 was released in 2015. Along with the release of ES6, the team responsible for defining these standards stated that it \nintends to release a new definition of the language yearly. Thus, ES2015 is interchangable with ES6.</p><p class="fragment">ESNext is how they define the next iteration of the standard. ES2016 is currently being defined.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Adoption</h2><p class="fragment">As browsers become more important to our lives, the adoption of these standards is done much faster. ES3 took about a decade to be adopted.\n ES5 took closer to about 3 years. ES6\'s current status is pretty impressive, in my book!</p><p class="fragment">To view its current adoption levels, <a href="http://kangax.github.io/compat-table/es6/">check out this table.</a></p><p class="fragment">You\'ll notice on the left there are things called "compilers/polyfills". This approach allows us to write ES6, and have it be transformed to backfill \nfunctionality into older browsers.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Babel</h2><p class="fragment">We will be using Babel to transpile our ES6 into ES5 to reach those outdated browsers. It has a 71% ES6 coverage at the time of recording, but I\'ve found\nthat it supports enough use cases for our purposes.</p><p class="fragment">In the <a href="https://www.youtube.com/watch?v=ptP-zVgOZD8">previous video</a> we set up a webpack configuration that executes a Babel transpilation on our code.</p><p class="fragment">More information <a href="https://babeljs.io/">can be found on Babel\'s site</a>.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>The future of ES</h2><p class="fragment">Personally, I don\'t see the use of transpilers and polyfills going away. The problemset that the Internet poses to browsers is a challenging one. Each browser is \nbeing developed independent of each other and those developers have their own approaches to a problem.</p><p class="fragment">Even subtle behavioral differences, over the span of billions of webpages could have an impact.</p><p class="fragment">Plus, it\'s easier to define a behavior than it is to implement it, as we all know!</p></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Variable Declaration and Destructuring in ES6</h2></section></section>'+(null==(t=n(6).call(this,e))?"":t)+(null==(t=n(63).call(this,e))?"":t)+(null==(t=n(64).call(this,e))?"":t)+(null==(t=n(65).call(this,e))?"":t)+(null==(t=n(66).call(this,e))?"":t)+(null==(t=n(67).call(this,e))?"":t)+(null==(t=n(68).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Variable Declarations</h2></section><section><h2>var</h2><p class="fragment"><code>var</code> should no longer be used</p><pre class="fragment">function variableHoisting() {\n    for(var i = 0; i < 10; i++) {\n        console.log(i);\n    }\n    console.log(i); //i is defined here, still!\n}</pre><p class="fragment">Variable hoisting was a strange behavior and most developers were unaware of its existance</p></section><section><h2>let</h2><p class="fragment">Behaves how one would expect <code>var</code> to behave. This is to be used for mutable variables.</p></section><section><h2>const</h2><p><code>const</code> is short for constant. These are immutable varaibles, ones that are not intended to change value (or reference).</p><p class="fragment">You can declare an object a const, yet still modify its properties. This is because you aren\'t changing the object\'s reference,\nbut just the properties of the object.</p><pre class="fragment">const testObject = {};\ntestObject.value = 42;\ntestObject = {}; //ESLint Error</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Template Strings</h2></section><section><pre>const aVariable = \'test\';\nlet string = \'Some String: \' + aVariable + \'.\';\nstring += \'\\n Another string added on a new line\';</pre><p class="fragment">Does this mess look familiar?</p></section><section><h2>Enter Template Strings!</h2></section><section><h4>Basic Notation</h4><p class="fragment"><code>`</code> (backticks) are used to denote a template string.</p><p class="fragment"><code>${ someVariable }</code> Represents interpolating the someVariable variable into the string.\nNote: These are javascript expressions. Variables, as well as other javascript (such as ternary operators) are valid.</p><p class="fragment">Formatting is maintained in a tempalte string. If you add a new line, and your IDE indents that new line, those indentations\nwill be in your compiled string.</p></section><section><pre>const aVariable = \'test\';\nconst string = `Some String: ${aVariable}.\nAnother string added on a new line.`;</pre><p class="fragment">This is useful if your javascript framework uses inline HTML declarations (e.x. React, Angular)</p><pre class="fragment">export default {\n  template: `&lt;div&gt;\n                &lt;strong&gtHello World!&lt;/strong&gt\n             &lt;/div&gt;`,\n};</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Simplified Object Declaration</h2></section><section><p>If variable names match the name of the property on an object, the need for a key/value pair is eliminated.</p><p class="fragment">One can simply express the pair as a single property.</p><pre class="fragment">const someVariable = \'Test\';\nconst obj = {\n  someVariable\n};\nconsole.log(obj);</pre><pre class="fragment">{\n  someVariable: \'Test\'\n}</pre><div class="fragment"><p>ES5 equivalent:</p><pre class="fragment">var someVariable = \'Test\';\nvar obj = {\n  someVariable: someVariable\n};</pre></div></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Object Destructuring</h2></section><section><p>Destructuring an object is breaking down an object and assigning properties of the object to variables.</p><div class="fragment"><p>Basic syntax</p><pre>const { toAssignTo } = {\n  toAssignTo: 42\n};</pre></div></section><section><h2>Multiple Variable Declarations</h2><pre>const { valueA, valueB, valueD } = {\n  valueA: 42,\n  valueB: 63,\n  valueC: 85\n};\nconsole.log(valueA, valueB, valueD); // 42, 63, undefined</pre><p class="fragment">This also works on object references.</p></section><section><h2>Transpiled ES5</h2><pre>var objectReference = {\n  valueA: 42,\n  valueB: 63,\n  valueC: 85\n};\nvar valueA = objectReference.valueA;\nvar valueB = objectReference.valueB;\nvar valueD = objectReference.valueD;</pre></section><section><h2>Parameter Destructuring</h2><pre class="fragment">const person = {\n  name: \'Evan Williams\',\n  occupation: \'Project Engineer\',\n  twitterHandle: \'@angular_evan\'\n};\nfunction getCapitalizedName({ name }) {\n  return name.toUpperCase();\n}</pre><pre class="fragment">function getCapitalizedName(obj) {\n  var name = obj.name;\n  return name.toUpperCase();\n}</pre></section><section><h2>Array (iterable object) Destructuring</h2><pre class="fragment">const [first, second, third] = [1, 2, 3];\nconsole.log(first, second, third); //1, 2, 3</pre><p class="fragment">You can skip over assigning elements in the array by putting two commas in a row (or emitting the first variable name). You also don\'t have to match the length of the array.</p><pre class="fragment">function outputEveryOtherArgument(first, second, third, fourth, fifth) {\n  const [ , b, , d] = arguments;\n  console.log(b, d);\n}</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Spread Operator</h2></section><section><h2>Basic Syntax</h2><pre class="fragment">const first5 = [1, 2, 3, 4, 5];\nconst next5 = [6, 7, 8, 9, 10];\nconst all10 = [...first5, ...next5];\nconsole.log(all10); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</pre></section><section><h2>Used with <code>push</code></h2><pre class="fragment">const blank = [];\nconst toCopy = [1, 2, 3, 4, 5];\nblank.push(...toCopy); // blank.push(1, 2, 3, 4, 5);</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Rest Parameters</h2></section><section><p>This is the same syntax as spread operators, but performs the reverse operation.</p><p class="fragment">It will condense the remainder of a collection into a single variable.</p></section><section><h2>Basic Syntax</h2><pre class="fragment">function multiplyBy(multiplier, ...values) {\n  const result = [];\n  for(let i = 0; i < values.length; i++) result.push(values[i] * multiplier); // Array.prototype.map will be covered in another video :)\n  return result;\n}\nmultiplyBy(5, 1, 2, 3, 4, 5); // [5, 10, 15, 20, 25];</pre></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>New Methods / Misc. Syntax in ES6</h2><div class="fragment">* But not all of it</div></section></section>'+(null==(t=n(6).call(this,e))?"":t)+(null==(t=n(71).call(this,e))?"":t)+(null==(t=n(72).call(this,e))?"":t)+(null==(t=n(73).call(this,e))?"":t)+(null==(t=n(74).call(this,e))?"":t)+(null==(t=n(75).call(this,e))?"":t)+(null==(t=n(76).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Set</h2></section><section><p>A set is a collection that contains unique elements.</p><p class="fragment">Uniqueness is determined by reference for objects and values for primitives.</p><pre class="fragment">const set = new Set([1, 4, 5, 3, 1]);\nset.forEach((item) => console.log(item)); //1, 4, 5, 3</pre></section><section><h2>Methods</h2><ul class="fragment"><li><strong>add</strong> - Adds an element to the Set, does not error if attempting to add duplicate value</li><li class="fragment"><strong>clear</strong> - Empties the set</li><li class="fragment"><strong>delete</strong> - Removes a given value</li><li class="fragment"><strong>forEach</strong> - Iterates over the set, performing the callback for each element.</li><li class="fragment"><strong>has</strong> - Whether or not a set contains a reference or value.</li><li class="fragment"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Full API</a></li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Maps</h2></section><section><p>But wait...a map is a set of keys/values, right? Aren\'t Javascript Objects...keys...and values?</p><p class="fragment">Well, yes...but...</p><p class="fragment">Maps are better for mapping for these reasons</p></section><section><div>Maps do not have a set of properties when you create a new instance. Objects do because they are a prototypical object.</div><pre>const obj = {};\nconsole.log(obj.toString); // Outputs the function\nconst map = new Map();\nconsole.log(map.get(\'toString\')); // Undefined\nmap.set(\'toString\', () => \'I\\\'m a map!\');\nconsole.log(map.get(\'toString\')); // I\'m a map!</pre></section><section><div>Keys can be anything you want!</div><div class="fragment">NaN? </div><span class="fragment">Yes!</span><div class="fragment">1? </div><span class="fragment">Yes!</span><div class="fragment">Do I have to use strings to represent those? </div><span class="fragment">Nope!</span></section><section><div>Maps also have the ability to tell you how many elements have been inserted</div><pre>const map = new Map();\nmap.set(\'name\', \'Evan Williams\');\nconsole.log(map.size) // 1</pre></section><section><div>Methods</div><div class="fragment">The methods that apply to Set also apply to Map, i.e. has, forEach, delete, clear.</div><div class="fragment"><strong>set</strong> is used to add to the map. Given a key and a value, it pushes the key/value pair to the map. It is then accessible via get at that key.</div><div class="fragment"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Full API</a></div></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Array Methods</h2></section><section><h2>Find</h2><p class="fragment">Basic Syntax:\narray.find(callback); //Callback determines the criteria to match</p><pre class="fragment">const array = [{\n    a: 42\n}, {\n    a: 55\n}];\nconsole.log(array.find((item) => item.a === 42)); //Outputs the first element</pre><p class="fragment">If there are more than one element matches in the collection, it will return the first instance of the match. Think of this like \nperforming an "if matches, break" in a for loop.</p></section><section><h2>Filter</h2><p class="fragment">Similar to how find works, but returns a collection of all the matching elements.</p><pre class="fragment">const array = [2, 4, 5, 6];\narray.filter((item) => item % 2 === 0); // [2, 4, 6]</pre></section><section><h2>Array.from</h2><p class="fragment">Converts an iterable object into an Array</p><p class="fragment">This is useful for accessing Array prototype methods on a collection that was not previously an Array type.</p><pre class="fragment">const divs = document.querySelectorAll(\'div\');\ndivs.map((item) => item.id); // Will not work, map is not on the NodeList prototype</pre><pre class="fragment">const divs = Array.from(document.querySelectorAll(\'div\'));\ndivs.map((item) => item.id); // Works! Grabs all the IDs of the divs</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Object.assign</h2></section><section><p><strong>Object.assign</strong> is useful to assign multiple properties onto an object in an easier to read fashion.</p><p class="fragment">Basic concept: Merges right most objects onto their left object, joining properties when there is no overlap, and overriding when there \nis an overlap.</p><pre class="fragment">const toCopyA = {\n    a: 42\n  }, toCopyB = {\n    a: 63,\n    b: 42\n  };\nconst combined = Object.assign({ c: 42 }, toCopyB, toCopyA);</pre><p class="fragment">All properties (a, b, c) are put onto the first object.\n It returns the reference to the leftmost object (in this case { \n   c: 42 \n}).</p></section><section><h2>Ok...but why is it "easier to read?"</h2><pre class="fragment">function MyObject(a, b, c, d) {\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n}\nMyObject.prototype.outputParams = function() {\n  console.log(this.a, this.b, this.c, this.d);\n}</pre><pre class="fragment">function MyObjectES6(a, b, c, d) {\n  Object.assign(this, {\n    a, b, c, d\n  });\n}</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>startsWith</h2><p class=\"fragment\">It's pretty self explanatory, whether or not a string starts with a string to match.</p><p class=\"fragment\">The second parameter can be used to give it an index to start at within the string. It defaults to 0.</p><pre class=\"fragment\">console.log('Evan'.startsWith('E')); // true\nconsole.log('Evan'.startsWith('B')); // false\nconsole.log('Evan'.startsWith('E', 1)); // false</pre></section><section><h2>endsWith</h2><p class=\"fragment\">The same as starts with, but in reverse!</p></section><section><h2>includes</h2><p class=\"fragment\">The same as startsWith, or endsWith, but applies to the full string.</p></section><section><h2>Why are these handy?</h2><p class=\"fragment\">These replace the need to use \"indexOf\" statements such as:</p><pre class=\"fragment\">console.log('Evan'.indexOf('E') === 0); // starts with\nconsole.log('Evan'.indexOf('n') === 'Evan'.length - 1); // ends with\nconsole.log('Evan'.indexOf('a') !== -1); // includes</pre><p class=\"fragment\">This is nice because you don't have to remember what is returned when it's not found, or compare against the length of the string.</p></section></section>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Things I left off (and will not cover)</h2></section><section><h2>Iterators &amp; Generators</h2><p class="fragment">These are ways of creating a custom iterable object.</p><p class="fragment"><em>Why didn\'t I cover it?</em> I haven\'t found a use for it yet.</p></section><section><h2>Unicode, binary and octal literals</h2><p class="fragment">Supports full unicode, binary, and octal literals in source.</p><p class="fragment"><em>Why didn\'t I cover it?</em> I\'m an English only speaker and don\'t currently use unicode characters. Nor do I ever need to get low enough to use binary or octals!</p></section><section><h2>Proxies</h2><p class="fragment">To be honest, I don\'t understand these. Check out the <a href="https://github.com/lukehoban/es6features#proxies">link here</a>.</p></section><section><h2>Symbols</h2><p class="fragment">These are a new primitive type. They\'re an interchangable way of assigning properties to an object. You can use symbols as you can strings to access properties from\nan object.</p></section><section><h2>Tail Calls</h2><p class="fragment">These have to do with recursive function calls. It aids in not overflowing the stack.</p><p class="fragment"><em>Why didn\'t I cover it?</em> I fear recursive calls. I always end up infinite looping. Plus, in my day-to-day, I don\'t really encounter them much, so I\'m no expert.</p></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Arrow Functions</h2></section></section>'+(null==(t=n(6).call(this,e))?"":t)+(null==(t=n(79).call(this,e))?"":t)+(null==(t=n(80).call(this,e))?"":t)+(null==(t=n(81).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>Basic Syntax</h2></section><section><pre>const helloWorld = () => {\n  console.log('Hello World');\n}\nconst oldHelloWorld = function() {\n  console.log('Hello World');\n}</pre></section><section><h2>Inline Return</h2><pre>const getGreeting = (name) => `Hello, ${name}!`;\nconsole.log(getGreeting());</pre><p class=\"fragment\">By removing the curly braces, it will return the result of the expression inside the arrow function.</p><p class=\"fragment\">Note: You are unable to perform more than 1 line of code in these inlined arrow functions.</p></section><section><h2>Inline Object Returns</h2><pre>const makeNameObject = (first, middle, last) => ({\n  first, middle, last\n});\nconsole.log(makeNameObject('Evan', 'M.', 'Williams')); // { first: 'Evan', middle: 'M.', last: 'Williams' }</pre></section><section><h2>Single Parameter Notation</h2><p class=\"fragment\">Before I show this syntax, I suggest not to use it. Single parameter notation blends into the code more so than using the ()</p><pre class=\"fragment\">const collection = [1, 2, 3];\ncollection.map(item => item * 2);</pre><p class=\"fragment\">My preference would be to define the arrow function as:</p><pre class=\"fragment\">collection.map((item) => item * 2);</pre></section></section>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2><code>this</code> Keyword</h2></section><section><p>The <strong>this</strong> keyword, in ES5, is assigned to the context of each function. In strict mode, it would return\nundefined.</p><p class="fragment">This was handled in ES5 by aliasing the <strong>this</strong> variable outside the context of the interior function.</p><pre class="fragment">function Name(first, middle, last) {\n  const self = this;\n  self.nameString = `${first} ${middle} ${last}`;\n  setTimeout(function() {\n    console.log(`Hello, ${self.nameString}`); // Hello, Evan M. Williams\n  }, 250);\n}</pre></section><section><p>Arrow functions use the contextual `this` of its parent function.</p><pre class="fragment">function Name(first, middle, last) {\n  this.nameString = `${first} ${middle} ${last}`;\n  setTimeout(() => console.log(`Hello, ${this.nameString}`), 100); // Hello, Evan M. Williams\n  setTimeout(function() {\n    console.log(`Hello, ${this.nameString}`); // Hello, undefined\n  }, 250);\n}</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>So, why use Arrow Functions?</h2></section><section><p>They're more concise.</p><pre class=\"fragment\">const myCollection = [1, 5, 10, 100];\nconsole.log(myCollection.map((i) => i * i));\nconsole.log(myCollection.map(function(i) {\n  return i * i;\n}));</pre></section><section><p>The <strong>this</strong> variable is easier to understand.</p><pre class=\"fragment\">function MyType() {\n  this.name = 'MyType';\n  setTimeout(() => console.log(this.name), 250);\n}\nfunction MyType() {\n  const self = this;\n  self.name = 'MyType';\n  setTimeout(function() {\n    console.log(self.name);\n  }, 250);\n}</pre></section></section>"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>ES6 Classes</h2></section></section>'+(null==(t=n(6).call(this,e))?"":t)+(null==(t=n(84).call(this,e))?"":t)+(null==(t=n(85).call(this,e))?"":t)+(null==(t=n(86).call(this,e))?"":t)+(null==(t=n(87).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>The concept of classes in ES5</h2></section><section><h2>Prototypical Objects</h2><p class="fragment">Objects in Javascript are prototypical, meaning they are created from a "prototype" declaration.</p><p class="fragment">All objects of that type will have the same properties as the prototype when created. For instance, a new object \nwill have "toString" method already available when defining it.</p></section><section><h2>Defining Classes as Functions</h2><p class="fragment">In ES5, you could create a class-like object by defining it as a function and then calling new on that function.</p><pre class="fragment">function Person(name, age) {\n  const self = this;\n  self.name = name;\n  self.age = age;\n}\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, ${this.name}`);\n}\nnew Person(\'Evan Williams\', 27).sayHello(); // Hello, Evan Williams</pre></section><section><p>A ES6 class will be transpiled into a function similar to above, but instead of using prototypes, it manually sets\neach property onto the returned object.</p><p class="fragment">You can see all the extra fluff that gets added by <a href="https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=false&amp;presets=es2015%2Creact%2Cstage-2&amp;code=class%20Person%20%7B%0D%0A%20%20constructor%20(name%2C%20age)%20%7B%0D%0A%20%20%20%20this.name%20%3D%20name%3B%0D%0A%20%20%20%20this.age%20%3D%20age%3B%0D%0A%20%20%7D%0D%0A%20%20sayHello%20()%20%7B%0D%0A%20%20%20%20console.log(%60Hello%2C%20%24%7Bthis.name%7D%60)%3B%0D%0A%20%20%7D%0D%0A%7D)">viewing this link</a>.</p></section><section><h2>Why prototypical inheritance is potentially dangerous</h2></section><section><p>The reason classes don\'t use prototypes, is prototypes can potentially be modified outside the context of the class.</p><pre class="fragment">Object.prototype.toString = () => console.log(`Didn\'t expect this, did you?`);\nconst test = {};\ntest.toString(); // Didn\'t expect this, did you?</pre><p class="fragment">Modifying the prototype even changes the behavior of already defined objects.</p><pre class="fragment">const test = {};\ntest.toString(); // [object Object]      \nObject.prototype.toString = () => console.log(`Didn\'t expect this, did you?`);\ntest.toString(); // Didn\'t expect this, did you?</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>ES6 Class Syntax</h2></section><section><h2>Definition</h2><pre class="fragment">class Clazz {\n}</pre></section><section><h2>Constructor</h2><pre class="fragment">class Clazz {\n  constructor(name) {\n    this.name = name; // this references the instance\n  }\n}</pre></section><section><h2>Methods</h2><pre class="fragment">class Clazz {\n  constructor(name) {\n    this.name = name;\n  }\n  sayHello() {\n    console.log(`Hello, ${this.name}`); // Hello, name from constructor\n  }\n}</pre></section><section><h2>Static Methods</h2><pre class="fragment">class RegexUtility {\n  static isNumber(str) {\n    return /\\d+/.test(str);\n  }\n}\nRegexUtility.isNumber(\'12\'); // true</pre><p class="fragment">These are super useful for utility functions such as manipulating objects or performing a standard behavior.</p></section><section><h2>Instantiating a Class</h2><pre class="fragment">const clazz = new Clazz(\'Evan M. Williams\');\nclazz.sayHello();</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>Class Inheritance</h2></section><section><pre>class Animal {\n  makeNoise() {\n    console.log(this.sound);\n  }        \n}\nclass Dog extends Animal {\n  constructor() {\n    super(); // Required in a constructor\n    this.sound = 'Woof!';\n  }\n}\nnew Dog().makeNoise(); // Woof!</pre></section><section><p>You can access parent function by using the <strong>super</strong> keyword.</p><pre class=\"fragment\">class Animal {\n  eat(food) {\n    console.log(`The animal just ate ${food}`);\n  }\n}\nclass Dog extends Animal {\n  beFed() {\n    super.eat('dog food');\n  }\n}\nnew Dog().beFed(); // The animal just ate dog food.</pre></section><section><h2>Expression based Inheritance</h2></section><section><pre>class Animal {\n  makeNoise() {\n    console.log(this.noise);\n  }\n}\nclass Dog extends Animal {\n  constructor() {\n    super();\n    this.noise = 'woof';\n  }\n}\nclass Puppy extends Dog {\n  constructor() {\n    super();\n    this.noise = 'yipe';\n  }\n}\nconst defineCanine = (age) => age < 1.0 ? Puppy : Dog;\nclass Canine extends defineCanine(0.5) {\n  constructor() {\n    super(); \n  }\n}\nnew Canine().makeNoise(); // yipe</pre></section></section>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Getters and Setters</h2></section><section><p>You can always access and set properties on an instance of a class as you would any object.</p><pre class="fragment">class Clazz {\n  constructor() {\n    this.property = \'prop\';\n  }\n}\nconsole.log(new Clazz().property); // prop</pre></section><section><p>ES6 classes introduced getters and setters on the class definition.</p><pre class="fragment">class Clazz {\n  get property() {\n    return this._property;\n  }\n  set property(property) {\n    this._property = property;\n  }\n}</pre><p class="fragment">Using the standard property accessor syntax (dot notation or array notation) on a class instance will\ncall the <strong>get</strong> and <strong>set</strong> functions matching that name.</p></section><section><pre>class Clazz {\n   get property() {\n     return this._property;\n   }\n   set property(property) {\n     console.log(`Setting property to: ${property}`);\n     this._property = property;\n   }\n }\n const clazz = new Clazz();\n clazz.property = \'Test\'; // Setting property to Test\n console.log(clazz.property); // Test</pre></section><section><p>This is useful for executing some sort of data transformation on incoming properties or type checking and validation.</p><p class="fragment">If you noticed, I used an underscore to name the property on the <strong>this</strong> keyword. This is because if you \nattempt to name the property on the instance the same as the name of the property, you\'ll get an infinite loop.</p><p class="fragment">The infinite loop is caused by calling the setter when you attempt to set it within the <strong>set {property}</strong> function itself.</p></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Default Parameters</h2></section></section>'+(null==(t=n(6).call(this,e))?"":t)+(null==(t=n(90).call(this,e))?"":t)+(null==(t=n(91).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Basic Syntax</h2><p class="fragment">Adding an <strong>=</strong> after a parameter in a function declaration will declare the default.</p><p class="fragment">Default values are assigned to the parameter variable name if, and only if, <strong>undefined</strong> is passed to that\nparameter.</p><pre class="fragment">function logParams(a = 5, b, c = {}) {\n  console.log(a, b, c);\n}\nlogParams(); // 5, undefined, [object Object]\nlogParams(1, 1, 1); // 1, 1, 1\nlogParams(null, null, null); // null, null, null</pre></section><section><h2>With Destructuring</h2><p class="fragment">You can declare a default parameter on a destructured parameter.</p><pre class="fragment">function greet({ name: name = \'Evan\' }) {\n  console.log(`Hello, ${name}.`);\n}\ngreet({}); // Hello, Evan.\ngreet({\n  name: \'Ellie\'\n}); // Hello, Ellie.</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Why use default parameters?</h2><p class="fragment">Defaults are useful when a use case has a clearly defined base level. For instance, a rating on a 1 to 10 scale\nshould be a number between 1-10.</p><pre class="fragment">function setRating(rating = 1) {\n  this.rating = rating;\n}</pre></section><section><h2>As a way of documentation</h2><p class="fragment">ES6 is typeless, making it unknown to developers what is necessarily expected in a function call. Most code should make\nit obvious, but to a new developer, it may not be.</p><p class="fragment">By defining a default parameter as, say, an empty string, you can notate the expected data type.</p><pre class="fragment">function logNumberString(str = \'\') {\n  console.log(Number.parseInt(str));\n}</pre></section><section><h2>Prevent unexpected javascript errors</h2><p class="fragment">In ES5, most developers would do a defined check on an argument prior to performing an operation.</p><p class="fragment">With ES6 defaults, an undefined can be forced to be a defined value with the proper type for the function body.</p><pre class="fragment">function ES5Way(str) {\n  return (str || \'\').toUppercase();\n}\nfunction defaults(str = \'\') {\n  return str.toUppercase();\n}</pre></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Promises</h2></section></section>'+(null==(t=n(6).call(this,e))?"":t)+(null==(t=n(94).call(this,e))?"":t)+(null==(t=n(95).call(this,e))?"":t)+(null==(t=n(96).call(this,e))?"":t)+(null==(t=n(97).call(this,e))?"":t)+(null==(t=n(98).call(this,e))?"":t)+(null==(t=n(99).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Basic Concept of a Promise</h2></section><section><p>A promise is an expected result of an asynchronous operation.</p><p class="fragment">The most common scenario for a promise is the eventual return of an HTTP call to a server.</p><p class="fragment">The promise is the placeholder object that represents that operation.</p></section><section><p>Promises allow for the application to continue processing and execute a predefined call back for\na succesful, or error, completion of that operation.</p><p class="fragment">The promise is executed similar to that of a try/catch/finally block.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Basic Syntax</h2><p class="fragment">The Promise constructor takes a callback function to determine success and to perform the asynchronous \nfunction call. It is passed a resolve &amp; reject function to let the remainder of the code know if it was\nsuccessful.</p><pre class="fragment">new Promise((resolve, reject) => {\n  // Body of promise to determine success\n});</pre></section><section><h2>Resolve Function</h2><p class="fragment">The resolve function is used to represent a successful operation. The first parameter passed to the resolve \nfunction gets sent to the success callback of the promise.</p></section><section><h2>Reject Function</h2><p class="fragment">The reject function is similar to that of the resolve. Instead of entering the successful callback, it performs the \nerror case.</p></section><section><h2>Empty Promise Body</h2><p class="fragment">If a promise never resolves or rejects, nothing in the promise lifecycle is executed other than the construction of \nthe object.</p><pre class="fragment">new Promise((resolve, reject) => {\n  // Do nothing, for science.\n})\n.then(() => console.log(\'Resolve executed\'), () => console.log(\'Reject executed\'));</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>then</h2><p class="fragment">Takes two parameters, a success callback and an error callback.</p><p class="fragment">The first parameter is executed on success, the second on error.</p><p class="fragment">Neither is necessarily required, but using them without any parameters will not perform anything on resolution\nof the promise.</p><pre class="fragment">const success = (data) => console.log(`Success! ${data}`),\n      error = (data) => console.log(`An error occurred: ${data}`);\nnew Promise((resolve, reject) => {\n  // Resolve logic\n})\n.then(success, error);</pre></section><section><h2>finally</h2><p class="fragment">Finally is performed after the promise has gone through the full chain of resolve functions. It is executed\nregardless of success or failure.</p><p class="fragment">This is handy for setting up objects that need to exist regardless of the state of the promise or for cleaning\nup resources that may have been created during the promise.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>Promise Chaining</h2></section><section><p>The <strong>then</strong> method returns another promise to the next function. Therefore, if there is a multi-step\nprocess to be performed based on the result, it can be split into multiple parts.</p><pre class=\"fragment\">new Promise((resolve, reject) => {\n  // Resolve logic\n})\n.then((data) => {\n  if (data.success) {\n    return data;\n  } else {\n    Promise.reject();\n  }\n})\n.then((data) => {\n  console.log(`Successfully resolved data: ${data}`);\n}, () => console.error('Failure occurred'));</pre></section><section><p>It is also possible to return another promise within the <strong>then</strong> block of the promise. The next <strong>then</strong> \nof the chain will wait until that promise is resolved to continue the promise chain.</p><pre class=\"fragment\">new Promise((resolve, reject) => {\n  resolve('Hello World');\n})\n.then((str) => {\n  console.log(str);\n  return new Promise((resolve, reject) => {\n    resolve(`It's nice to meet you.`);\n  });\n})\n.then((str) => console.log(str));</pre></section></section>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Progrommatically Rejecting/Resolving in a then Block</h2></section><section><p>Within a then block, you can force the route of the resolution of the promise by returning either\nan already successfully resolved promise to the next then handler, or an already rejected promise.</p><p class="fragment">This is done by returning a <strong>Promise.resolve()</strong> or a <strong>Promise.reject()</strong>.</p></section><section><pre>new Promise((resolve, reject) => {\n  // Resolve Logic\n})\n.then((data) => {\n  return data.isSuccessful ? Promise.resolve(data.name) : Promise.reject();\n})\n.then((name) => console.log(`Hello, ${name}`), () => console.log(`I don\'t know your name!`));</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Promise.all</h2></section><section><p><strong>Promise.all</strong> is used to manage multiple promises in one promise chain.</p><p class="fragment">It will wait until all promises have been resolved to perform the <strong>then</strong> callbacks.</p><p class="fragment">If even one promise fails, they all enter the reject portion of the promise chain.</p><p class="fragment">Only the data from the first rejected promise is passed into the rejection handler.</p></section><section><pre>const getPromise = (item) => new Promise((resolve, reject) => {\n  resolve(item);\n});\nconst promises = [1,2,3,4,5].map(getPromise);\nPromise.all(promises)\n  .then((data) => {\n    console.log(data);\n  });</pre></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>ES6 Modules</h2></section></section>'+(null==(t=n(6).call(this,e))?"":t)+(null==(t=n(102).call(this,e))?"":t)+(null==(t=n(103).call(this,e))?"":t)+(null==(t=n(104).call(this,e))?"":t)+(null==(t=n(105).call(this,e))?"":t)+(null==(t=n(106).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Historical Reference</h2></section><section><p>Accessing objects between files has been a particularly interesting problem. Until recently, the majority of \nweb applications used global objects.</p><p class="fragment">This meant ensuring file load order, timing, and that objects are created sequencially in the script.</p></section><section><h2>Build Tools</h2><p class="fragment">With the introduction of build tools such as grunt &amp; gulp, this became easier to manage.</p><p class="fragment">Files could be loaded in order by using wild cards and injected in an automated fashion into the HTML.</p></section><section><p>It was, however, imperfect. Wildcards could grab all javascript files from a source directory, but what if a \nfile needs to be loaded to construct an object first?</p><p class="fragment">This lead to spaghetti code being used to load a given set of files first, then another, then another. It tied you\nto a standard file name, which commonly reflected the framework you were using, tying you closely to that framework.</p></section><section><p>There have been a few solutions (AMD, CommonJS) developed to modularize javascript, but until ES6 it was not widely used.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>ES6 Modules</h2></section><section><p>To solve this, ES6 standards introduced <strong>modules</strong>.</p><p class="fragment">They are called modules because they are isolated sections of code.</p><p class="fragment">Each module is wrapped in an <em>immediately invoked function expression</em> to ensure that there\nis no global object bleed.</p></section><section><p>At this point in time, no browser has native support of module loading.</p><p class="fragment">We will be using Webpack and Babel to perform the transpiling needed to give us access to import &amp; export \nstatements.</p></section><section><p>When importing a module, you are basically assigning an object representing the exported values of the module to a \nvariable.</p><p class="fragment">If a file does not export anything, it will assign undefined to the variable name.</p></section><section><p>Files will be exected on initial import, meaning if an object is not explicitly defined in the module, but instead constructed,\n that construction process will execute before assigning it to the variable in the import statement.</p><p class="fragment">This means, if a file modifies global objects, or creates a global object, simply importing that file will generate those global\nobjects for use.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Export Syntax</h2></section><section><p>Export statements are relatively straight forward.</p><p class="fragment">You can export a newly declared variable...</p><pre class="fragment">export const MY_URL = \'https://m3fawner.github.io/\';</pre></section><section><p>You can export <strong>default</strong> exports, which you\'ll see how to import later.</p><pre class="fragment">export default class {\n  ...\n};</pre></section><section><p>You can also mix the use of new variable declarations and defaults.</p><pre class="fragment">export default class {\n\n};\nexport const TEST = \'Hello World\';</pre></section><section><p>You cannot, however, export pre-defined variables without aliasing them under\na new name.</p><pre class="fragment">const toExport = \'Test\';\nexport toExport; // Invalid</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Import Syntax</h2></section><section><h2>Simple Execution import</h2><p class="fragment">To simply execute the imported script, importing the file location as follows will suffice.</p><pre class="fragment">import \'../dir/file\';</pre><p class="fragment">The paths are all relative to the file importing the module.</p><p class="fragment">The file extension <strong>js</strong> can be ommitted in the import statement.</p></section><section><p>Since we are importing an object representation of an import, we can destructure the exports.</p><pre class="fragment">import { someExport } from \'../dir/file\';</pre><p class="fragment">This will grab just the <strong>someExport</strong> export from the module.</p></section><section><p>If destructuring is not used in the import statement, it will assign the default export to the variable.</p><pre class="fragment">import defaultExport from \'../dir/file\';</pre><p class="fragment">If no default is defined, the <strong>defaultExport</strong> variable will be set to undefined.</p></section><section><p>If you want to access the full object, you can use <strong>*</strong> as your import. The object will be set to the variable\nfollowing "as" in that statement.</p><pre class="fragment">import * as Module from \'../dir/file\';</pre><p class="fragment">All exports, including <strong>default</strong>, are available as properties of the "Module" object.</p></section><section><p>In addition, if you would like to alias the imported variable name, you can destructure the object and use <strong>as</strong> \nto alias.</p><pre class="fragment">import { test as TEST } from \'../dir/file\';</pre></section><section><p>These statements can be mixed and matched.</p><pre class="fragment">import Test, { TestSupport } from \'../dir/test\';</pre><p class="fragment">This assigns the default export to "Test", but also imports the exported "TestSupport" variable from the module.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>Modules with Webpack</h2></section><section><p>For the sake of our project, webpack handles the transpiling.</p><p class=\"fragment\">From my previous video, we discussed how to add \"root\" directories to our webpack configuration.</p><p class=\"fragment\">This allows us to eliminate unnecessarily duplicated paths, such as <strong>node_modules</strong> for our \ndependencies and <strong>src</strong> for our source files.</p><pre class=\"fragment\">resolve: {\n  root: [\n    path.resolve('src'),\n    path.resolve('node_modules')\n  ]\n}</pre></section><section><p>In addition, we use aliases for those files that are not able to be imported because they are not properly\nconfigured in their package.json.</p><pre class=\"fragment\">resolve: {\n  root: [\n    path.resolve('src'),\n    path.resolve('node_modules')\n  ],\n  resolve: {\n    './~reveal/': 'reveal'\n  }\n}</pre><p class=\"fragment\">The import <strong>import 'reveal';</strong> can now function.</p></section></section>"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Pug</h2></section></section>'+(null==(t=n(109).call(this,e))?"":t)+(null==(t=n(110).call(this,e))?"":t)+(null==(t=n(111).call(this,e))?"":t)+(null==(t=n(112).call(this,e))?"":t)+(null==(t=n(113).call(this,e))?"":t)+(null==(t=n(114).call(this,e))?"":t)+(null==(t=n(115).call(this,e))?"":t)+(null==(t=n(116).call(this,e))?"":t)+(null==(t=n(117).call(this,e))?"":t)+(null==(t=n(118).call(this,e))?"":t)+(null==(t=n(119).call(this,e))?"":t)+(null==(t=n(120).call(this,e))?"":t)+(null==(t=n(121).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Introduction to Pug</h2><img src="assets/pug.svg" style="max-height: 400px !important;"></section><section><p>Pug is a HTML-like language. It represents HTML tags, but uses a different syntax and a \nwebpack loader to transpile it into HTML.</p><p class="fragment">The main features of Pug are CSS selector element definitions, file includes, mixins, expressions, \nextensibility...etc.</p></section><section><p>Pug used to be called "Jade" until it got sued for naming rights. It renamed itself to Pug, but the two\nnames are pretty synonomous at this point.</p><p class="fragment">The full API can be found at <a href="https://pugjs.org">pugjs.org</a>.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Installing Pug</h2></section><section><p>We\'ll be adding pug to our NPM dependencies, as well as its loader.</p><pre class="fragment">npm install --save-dev pug pug-lint pug-loader</pre><p class="fragment">I\'ve installed pug-lint, but this is optional. I use it in tandem with my VSCode plugin for pug-linting.</p></section><section><p>Now we\'ll have to tell webpack to register the pug loader for all <strong>.pug</strong> extensions.</p><pre class="fragment">loaders: [\n  {\n    test: /\\.pug$/,\n    loader: \'pug\'\n  }\n]</pre><p class="fragment">Pug can now be imported into javascript files via import statements.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Basic Syntax</h2></section><section><p>The basic syntax is very similar to that of HTML.</p><p class="fragment">There is no need for closing tags.</p><p class="fragment">CSS selectors are used to define the elements.</p><p class="fragment">Nesting elements is performed by indenting an element declaration on the next line.</p></section></section>'}},function(e,t,n){var s=n(0);e.exports=function(e){var t,n="";return n=n+'<section><section><h2>Defining Elements</h2></section><section><h2>Elements</h2><p class="fragment">Elements are declared by providing the tag name.</p><pre class="fragment">div\n  span\n    section</pre><pre class="fragment">&lt;div&gt;\n  &lt;span&gt;\n    &lt;section&gt;\n    &lt;/section&gt;\n  &lt;/span&gt;\n&lt;/div&gt;</pre></section><section><h2>Class Notation</h2><p class="fragment">You can also use .class-name to add a class to an element.</p><pre class="fragment">span.bold</pre><pre class="fragment">&lt;span class="bold"&gt;&lt;/span&gt;</pre><p class="fragment">If you have a div with classes on it, you can actually drop the div tag and just use <strong>.class-name</strong>.</p><pre class="fragment">.class-name</pre><pre class="fragment">'+s.escape(null==(t='<div class="class-name"></div>')?"":t)+'</pre></section><section><h2>IDs</h2><p class="fragment">IDs can be defined on an element using CSS selectors, as you would with class names.</p><pre class="fragment">#some-id</pre><pre class="fragment">'+s.escape(null==(t='<div id="some-id"></div>')?"":t)+'</pre></section><section><h2>Attributes</h2><p class="fragment">Attributes are declared basically as you would in HTML, but instead using parenthesis.</p><pre class="fragment">'+s.escape(null==(t='p(my-attr="test") Hello, Evan')?"":t)+'</pre><pre class="fragment">'+s.escape(null==(t='<p my-attr="test"> Hello, Evan</p>')?"":t)+'</pre><p class="fragment">Any number of attributes can be added, separated by a space or a comma.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Interpolation</h2></section><section><p>Similar to template strings, interpolation can be done in Pug.</p><pre class="fragment">p #{name}, you rock!</pre><p class="fragment">When rendering the template above with a contextual object containing a property <strong>name</strong>, \nit will render as the name you chose, you rock.</p></section><section><pre>import YouRockTemplate from \'./you-rock.pug\';\nconsole.log(YouRockTemplate({\n  name: \'Evan\'\n})); // Evan, you rock!</pre><p class="fragment">This is quite useful for conditionals and iterations, which we will discuss later.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Including Templates</h2></section><section><p>Including templates allows for amazing reuse. It\'s the reason I fell in love with Pug.</p><p class="fragment">Include also works to include Pug files containing mixins, allowing for the reuse of those\nmixins, as well.</p><p class="fragment">File paths are relative to the pug file, so prepare to use ../ a lot</p></section><section><pre>include ../mixins/profile.pug\n// Using the profile mixin from the profile.pug file\n+profile(\'Evan Williams\')\np.\n  Some Text\ninclude ../templates/contact-me.pug</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Inheritence</h2></section><section><p>Inheritence is as you would expect for any object oriented language.</p><p class="fragment">Stating that a given HTML element extends a template will pull in the content of that file.</p><p class="fragment">There are customizable chunks of the template called <strong>blocks</strong> that the implementing template\ncan modify</p></section><section><pre>my-parent-template\n  p.common.\n    This is common to every template that implements this.\n  block specific-details\n  p.common.\n    You can even surround blocks with other elements and have multiple blocks.\n  block additional-details\n  block optional-block</pre><pre>my-child-template\n  extends ../templates/my-parent-template.pug\n    block specific-details\n      p My name is Evan Williams\n    block additional-details\n      p I prefer Pug over HTML!</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Mixins</h2></section><section><p>Mixins are a way to create dynamic templates.</p><p class="fragment">They are basically function calls with a set of parameters that implementing templates\ncan use to change the behavior of the mixin.</p><p class="fragment">It\'s also a convenient way to group several like templates into one file and being able to choose\nwhich portions of that file you\'d like to use.</p><p class="fragment">Mixins must be defined prior to usage.</p></section><section><pre>// Defining the mixin\nmixin profile(name, age)\n  span Hello, #{name}!\n  span I hear you\'re #{age}...that is \n  if age > 20\n    span old!\n  else\n    span young!\n// Using the mixin\n+profile(\'Evan\', 27)</pre><span class="fragment"><pre><code class="language-html">&lt;span&gt;Hello, Evan&lt;/span&gt;\n&lt;span&gt;I hear you\'re 27...that is&lt;/span&gt;\n&lt;span&gt;old&lt;/span&gt;\n</code></pre>\n</span></section></section>'}},function(e,t,n){var s=n(0);e.exports=function(e){var t,n="",o=e||{};return function(e){n=n+'<section><section><h2>Conditionals and Cases</h2></section><section><h2>Conditionals</h2><p class="fragment">if / else if / else can be used, using Javascript to modify templates dynamically.</p><p class="fragment">Variables can be used by defining them with the <strong>- var test = \'Something\';</strong> notation. They can also be\npassed into mixins.</p><pre class="fragment">- var useFirst = true\nif useFirst\n  span If useFirst is true, this will be used.\nelse\n  span Otherwise, this will.</pre></section><section><h2>Cases</h2><p class="fragment">Cases are switch functions based on a given input.</p><pre class="fragment">mixin show-bananas(bananas)\n  case bananas\n    when 0\n      span You have no bananas.\n    when 1\n      span You have a banana.\n    default\n      span You have '+s.escape(null==(t=e)?"":t)+' bananas.\n+show-bananas(0)</pre><pre class="fragment">'+s.escape(null==(t="<span>You have no bananas</span>")?"":t)+"</pre></section></section>"}.call(this,"bananas"in o?o.bananas:"undefined"!=typeof bananas?bananas:void 0),n}},function(e,t,n){var s=n(0);e.exports=function(e){var t,n="",o=e||{};return function(e){n+="<section><section><h2>Iteration</h2></section><section><p>Iteration can be done over an array in order to output many of a given template.</p><p class=\"fragment\">As you'll see in the <strong>Using Pug</strong> slide, you'll be able to render the template with\nan object representing the context, in which you can include an array.</p></section><section><pre>h4 Hello to my following subscribers!\nul\n  each item in names\n    li item</pre><h4>Hello to my following subscribers!</h4><ul>",function(){var o=e;if("number"==typeof o.length)for(var i=0,a=o.length;i<a;i++){var r=o[i];n=n+"<li>"+s.escape(null==(t=r)?"":t)+"  </li>"}else for(var i in a=0,o)a++,r=o[i],n=n+"<li>"+s.escape(null==(t=r)?"":t)+"  </li>"}.call(this),n+="</ul></section></section>"}.call(this,"names"in o?o.names:"undefined"!=typeof names?names:void 0),n}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Filters</h2></section><section><p>Filters are used to take a given set of code and transpile it into HTML.</p><p class="fragment">This allows for the transpiling of many languages included SASS, CoffeeScript, Babel, and Markdown.</p><p class="fragment">We\'ll show how to add Markdown transpiling to your app here.</p></section><section><pre>npm install --save-dev jstransformer-markdown-it</pre><pre>// index.pug\n:markdown-it()\n  ### Header\n  [Test](https://www.youtube.com/user/m3fawner)</pre></section><section><p>That\'s all it takes!</p><p class="fragment">I personally only use markdown filters, because it is easier to do embedded Javascript notation and \nHTML for these slides.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Misc. Features</h2></section><section><h2>Code</h2><p class="fragment">You can imbed code using <strong>=</strong>. I will say, it is a bit finicky.</p><pre class="fragment">p\n  = \'&lt;div&gt;This is some HTML, but as code&lt;/div&gt;\'</pre><p class="fragment">You\'ll have to surround the code in a single quote.</p><p class="fragment">If the syntax is incorrect, I\'ve noticed that the pug-loader dies and will have to be restarted.</p></section><section><h2>Inline Tags</h2><p class="fragment">There are common cases where you will want to use HTML tags to highlight a piece of text.</p><p class="fragment">For that, you can use inline tag declarations to keep your text formatted rather well in your source code.</p><pre class="fragment">p This is #[strong some really important] text.</pre><p class="fragment">This will compile down to make <strong>some really important</strong> bold. In fact, that\'s in this slide\'s code!</p></section><section><h2>Comments</h2><p class="fragment">Comments in Pug are notated similar to javascript.</p><pre class="fragment">p Hello, world // Cliche and overused, I know</pre><pre class="fragment">p Hello, world //- This does not get added as an HTML comment.</pre><pre class="fragment">p Hello, world\n//\n  Block comments can be\n  stated like this.</pre></section><section><h2>Piping</h2><p class="fragment">Piping is allowing the text to be on a new line or multiple lines without\ncreating additional elements.</p><pre class="fragment">p.\n  Some text inside the p element.\np\n  | This is also inside the p element.</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Using Pug</h2></section><section><p>Once you\'ve defined your pug file, you can import it as you would a javascript module.</p><p class="fragment">You\'ll want to include the file extension, both because it\'s required &amp; for clarity\'s sake.</p></section><section><p>The imported function represents the callback to render the pug template into an HTML string.</p><p class="fragment">You can provide it with a contextual object for interpolation.</p><pre class="fragment">//test.pug\np Hello, #{name}\n//JS\nimport Test from \'./test.pug\';\nconst testHTML = Test({\n  name: \'Evan\'\n});\nconsole.log(testHTML); // &lt;p&gt; Hello, Evan &lt;/p&gt;</pre><p class="fragment">Note: If you have included files, the context still is applicable to all included templates, as well.\nYou don\'t have to worry about passing the right variables through to the child templates.</p></section><section><p>We will be using this in order to define our templates for components.</p><p class="fragment">Angular, and other frameworks, allows for the inlining of HTML during the declaration of components.    </p></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Typescript Introduction</h2></section></section>'+(null==(t=n(15).call(this,e))?"":t)+(null==(t=n(124).call(this,e))?"":t)+(null==(t=n(125).call(this,e))?"":t)+(null==(t=n(126).call(this,e))?"":t)+(null==(t=n(127).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>What is Typescript?</h2></section><section><p>Typescript is a superset of Javascript</p><ul><li class="fragment">ES6 Syntax included</li><li class="fragment">Additional features added to the Javascript language</li><li class="fragment">Introduces type definitions to the language</li></ul></section><section><p>Developed my Microsoft</p><p class="fragment">But don\'t worry, it seems to be pretty nice, so far!</p><p class="fragment">Sometimes, forgiveness is the right path!</p></section><section><p>Has some acceptance in the web world</p><ul><li class="fragment">Microsoft (VS Code)</li><li class="fragment">Google (Angular 2)</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Pros</h2></section><section><ul><li>Types</li><li class="fragment">Tooling Support</li><li class="fragment">Integration with dependencies is (potentially) easier</li><li class="fragment">It\'s optional</li><li class="fragment">Easier for Object Oriented developers</li><li class="fragment">Private, Protected, and Public</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Cons</h2></section><section><ul><li>Types</li><li class="fragment">Verbose</li><li class="fragment">Tooling</li><li class="fragment">Implementing Non-Typed Libraries is painful</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>My Opinion</h2></section></section>"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Typescript Type Definitions</h2></section></section>'+(null==(t=n(15).call(this,e))?"":t)+(null==(t=n(130).call(this,e))?"":t)+(null==(t=n(131).call(this,e))?"":t)+(null==(t=n(132).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Basic Syntax</h2></section><section><p>Types are defined following a colon.</p><pre class="fragment">const test: string = \'My first type!\';</pre></section><section><div><p>Types can be used to describe variables</p><pre>const test: string = \'Test\';</pre></div><div class="fragment"><p>They can describe what a function returns</p><pre>const test: Function = (): number => 5</pre></div><div class="fragment"><p>They also describe parameters of a function</p><pre>const test: Function = (num: number):number => num + 2;</pre></div></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Available Types</h2></section><section><h2>number</h2><p>Applies to hex, octal, binary, and integer values</p><pre class="fragment">const hex: number = 0xab0;\nconst binary: number = 0b0101;\nconst num: number = 5;</pre></section><section><h2>string</h2><p>Strings as well as template strings are valid</p><pre class="fragment">const str: string = \'String\';\nconst templateStr: string = `That was a ${str}, in case you were wondering.`;</pre></section><section><h2>Function</h2><pre>const func: Function = () => console.log(\'Hey\');\nconst func: Function = function(name) {\n  console.log(`Hello, ${name}.`);\n}</pre></section><section><h2>boolean</h2><pre>const tru: boolean = true;</pre></section><section><h2>Array</h2><p class="fragment">Collection of items, you can type arrays (this will come up in the generics video)</p><pre class="fragment">const list: Array<string> = [\'A\', \'B\'];\nconst list2: string[] = [\'Another\', \'definition\'];</pre></section><section><h2>Tuple</h2><p class="fragment">Array like, a collection matching a given type order</p><pre class="fragment">const tup:[string, number] = [\'Test\', 5];</pre></section><section><h2>enum</h2><p class="fragment">A way of enumerating options</p><pre class="fragment">enum MyEnum {First, Second, Third};</pre><p class="fragment">You can start the numbering at a different value if you wish</p><pre class="fragment">enum MyEnum {First=1, Second, Third};\nconsole.log(MyEnum.First); //1</pre></section><section><h2>any</h2><p class="fragment">Used to describe a variable that does not necessarily have a type</p><pre class="fragment">let myVar: any;\nlet myString: string = \'A string\';\nmyVar = myString; // works just fine\nmyString = myVar; // This does not, however</pre></section><section><h2>void</h2><p class="fragment">This is used only in function declarations.</p><p class="fragment">Well...you can technically use it for variables, but they can only be undefined or null! That\'s not useful to me.</p><pre class="fragment">function MyFunc(): void {\n  console.log(\'Do something\');\n}</pre></section><section><h2>null, undefined, never</h2><p class="fragment">null and undefined are similar to void and don\'t really serve a purpose outside of function return statements</p><p class="fragment">never implies a function never returns</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Type Assertions</h2></section><section><p>Type assertions are a lot like casting</p><p class="fragment">Asserting a type makes it behave as if it were that type</p><pre class="fragment">let str: any = \'String\';\nconsole.log((str as string).length);\nconsole.log((&lt;string&gt;str).length);</pre><p class="fragment">Same behavior using as type or &lt;type&gt;</p></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Typescript Classes</h2></section></section>'+(null==(t=n(15).call(this,e))?"":t)+(null==(t=n(135).call(this,e))?"":t)+(null==(t=n(136).call(this,e))?"":t)+(null==(t=n(137).call(this,e))?"":t)+(null==(t=n(138).call(this,e))?"":t)+(null==(t=n(139).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>ES6 and Typescript</h2></section><section><p>Since Typescript is a superset of Javascript, ES6 classes & Typescript classes \nare nearly syntactically the same.</p><p class="fragment">My <a href="https://www.youtube.com/watch?v=uRuP53zTHCQ">ES6 classes video</a> can cover that syntax</p></section><section><p>Added syntax includes:</p><ul><li class="fragment">Class level properties</li><li class="fragment">Public, private, protected modifiers</li><li class="fragment">Read Only modifier</li><li class="fragment">Abstract Classes</li><li class="fragment">Interfaces</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Class Level Properties</h2></section><section><p>Class level properties are explicit declarations of properties on a class instance</p><p class="fragment">This could always be done by just stating <code>this.property = \'Some Value\';</code></p><p class="fragment">Declaring them on the class allows for better tracking of what information is used within the class</p></section><section><pre>class Person {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}</pre><p>The name property can be accessed on the instance of the class after newing up an instance.</p></section><section><p>Class level properties can also be assigned in the constructor</p><p class="fragment">If any of the public, private, protected or readonly modifiers are used to describe a constructor parameter,\nthey will be assigned onto the class with the property name matching the parameter name.</p><pre class="fragment">class Person {\n  constructor(public name: string) {}\n}\nconsole.log(new Person(\'Evan Williams\').name); // Evan Williams</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Property Modifiers</h2></section><section><h2>Public</h2><p class="fragment">Directly accessible via property notations on any instance of the class</p><pre class="fragment">class Person {\n  constructor(public name: string) {}\n}\nnew Person(\'Evan Williams\').name; // Valid</pre></section><section><h2>Private</h2><p class="fragment">Can be accessed from within the instance of the class, but not by code external to the class instance.</p><pre class="fragment">class Person {\n  constructor(private name: string) {}\n  get _name(): string {\n    return this.name; // Valid, within the class\n  }\n}\nnew Person(\'Evan Williams\').name; // Invalid\nnew Person(\'Evan Williams\')._name; // Valid, calls the _name getter</pre></section><section><h2>Protected</h2><p class="fragment">Can be accessed within the instance, or by a child class that extends the class.</p><pre class="fragment">class Person {\n  constructor(protected name: string) {}\n}\nclass LoudPerson extends Person {\n  constructor(name: string) {\n    super(name);\n  }\n  get greeting():string {\n    return `HELLO, MY NAME IS ${this._name}`;\n  }\n  get _name():string {\n    return this.name.toUpperCase();\n  }\n}\nconsole.log(new LoudPerson(\'Evan Williams\').greeting);</pre></section><section><h2>Read Only</h2><p class="fragment">Must be assigned in the constructor or in the declaration of the variable</p><p class="fragment">Non-modifiable public property on the class</p><pre class="fragment">class Person {\n  readonly greeting:string = \'Hello world!\';\n  constructor(readonly name:string) {}\n}\nconst person = new Person(\'Evan Williams\');\nconsole.log(person.name); // Evan Williams\nconsole.log(person.greeting) // Hello world!\nperson.name = \'Not Evan Williams!\'; // Error, non-assignable</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Abstract Classes</h2></section><section><p>Abstract classes are used to share functionality between classes</p><p class="fragment">Shared functionality can be implemented in the abstract parent, and extended by children</p><p class="fragment">Abstract classes can not be directly instantiated, but their implementing children can</p><p class="fragment">Abstract modifiers can be used on function declarations, as well. They must be implemented by children classes</p></section><section><pre>abstract class Person {\n  constructor(protected name:string) {}\n  abstract stateAge(): void;\n  greet() {\n    console.log(`Hello there! My name is ${this.name}`);\n  }\n}\nclass DishonestPerson extends Person {\n  constructor(name: string, private age: number) {\n    super(name);\n  }\n  stateAge() {\n    console.log(`I am ${Math.min(this.age, 30)} years old`);\n  }\n}\nclass HonestPerson extends Person {\n    constructor(name: string, private age: number) {\n        super(name);\n  }\n  stateAge() {\n    console.log(`I am ${this.age} years old`);\n  }\n}</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Interfaces</h2></section><section><p>Interfaces describe an object, but are not instantiable</p><p class="fragment">Useful for describing an object that is not instantiated, such as a server request.</p><p class="fragment">Classes can implement an interface to make an instantiable object</p></section><section><pre>interface Point {\n  x: number;\n  y: number;\n}\nconst point: Point = { \n  x: 5,\n  y: 10\n};\nclass TwoDimensionalPoint implements Point {\n  x: number;\n  y: number;\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\nconst point2 = new TwoDimensionalPoint(5, 10);\nconsole.log(point.x === point2.x); // true</pre></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Smart vs Dumb Components</h2></section></section>'+(null==(t=n(142).call(this,e))?"":t)+(null==(t=n(143).call(this,e))?"":t)+(null==(t=n(144).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Smart Components</h2></section><section><ul><li>Makes service calls to get data to display</li><li class="fragment">Concerned with how things <strong>work</strong></li><li class="fragment">Typically complex components in comparison</li><li class="fragment">Maintain state</li></ul></section><section><h4>Pros</h4><ul><li class="fragment">Can be dropped into an application with little wiring</li><li class="fragment">Typically are represented very cleanly in the DOM</li></ul></section><section><h4>Cons</h4><ul><li class="fragment">Must have intimate knowledge of the API</li><li class="fragment">They are tightly coupled to the services</li><li class="fragment">Need to ensure that proper application state exists in order to make service calls</li><li class="fragment">Very difficult to customize</li><li class="fragment">Little reuse (can only represent one concept from one data source)</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Dumb Components</h2></section><section><ul><li>Purely presentational</li><li class="fragment">Concerned with how things <strong>look</strong></li><li class="fragment">Rely on data (typically) from a stateful parent component</li></ul></section><section><h4>Pros</h4><ul><li class="fragment">Does not care about where the data comes from, as long as it\'s properly formatted</li><li class="fragment">Simplistic</li><li class="fragment">Has no knowledge of the API and can easily adapt to change</li></ul></section><section><h4>Cons</h4><ul><li class="fragment">Need to be wired up as opposed to simply placed in the DOM</li></ul></section><section><p>Dumb components can handle interactions such as clicks & hovers and the like, but it should not\nmake service calls as a result. Callbacks should be used to trigger calls in smart components.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Best Practices</h2></section><section><ul><li>Entire applications should be written as a component</li><li class="fragment">The fewer smart components, the better</li><li class="fragment">Smart components can be made dumb by breaking it into two components,\na smart "wrapper" that binds the results of service calls into a dumb component</li></ul></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Pug</h2></section></section>'+(null==(t=n(147).call(this,e))?"":t)+(null==(t=n(148).call(this,e))?"":t)+(null==(t=n(149).call(this,e))?"":t)+(null==(t=n(150).call(this,e))?"":t)+(null==(t=n(151).call(this,e))?"":t)+(null==(t=n(152).call(this,e))?"":t)+(null==(t=n(153).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Introduction</h2></section><section><p>Before we get started...let\'s get something out of our system.</p></section><section><div style="display: flex; justify-content: center"><img src="http://i.imgur.com/yXHLZeb.gif"><img src="https://media.giphy.com/media/JfDNFU1qOZna/giphy.gif"><img src="https://media.giphy.com/media/FJnaJECZmVn4Q/giphy.gif"></div><div style="display: flex; justify-content: center"><img src="https://media.giphy.com/media/9muUXOtrd5gpG/giphy.gif"><img src="https://media.giphy.com/media/TULZbGrZ7T2tq/giphy.gif"></div></section><section><p>Yes it\'s called Pug.</p><p class="fragment">They got sued and changed their name to <a href="https://github.com/pugjs/pug/issues/2184">Pug</a>.</p></section><section><ul><li>Pug is used to generate HTML files</li><li class="fragment">The syntax mimics that of CSS selectors</li><li class="fragment">Nesting elements is done by indenting (significant whitespace)</li><li class="fragment">Similar to how Babel works, Pug templates are transpiled into HTML</li><li class="fragment">When importing Pug templates, a compile function is exposed</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Basic Introduction</h2></section><section><h2>Pug, beautiful Pug.</h2><pre>.row\n    .column.large-6\n        account-widget(account-id="1")\n    .column.large-6\n        customer-remarks</pre></section><section><h2>Resulting HTML</h2><pre><code class="language-HTML">    &lt;div class=&quot;row&quot;&gt;\n        &lt;div class=&quot;column large-6&quot;&gt;\n            &lt;account-widget account-id=&quot;1&quot;&gt;&lt;/account-widget&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;column large-6&quot;&gt;\n            &lt;customer-remarks&gt;&lt;/customer-remarks&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n</section><section><ul><li>Saves 3 lines (closing tags)</li><li>Cuts down characters from 176 to 80</li></ul></section><section><h2>Things you\'ll notice</h2><ul><li class="fragment"><code>div</code> tags are automatically added when only a class selector is used</li><li class="fragment">Closing tags are automatically added. Pug knows when to add a closing tag and when not to</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Code Reuse</h2></section><section><h2>Mixins</h2><ul><li class="fragment">Expose functions that take in parameters</li><li class="fragment">Mixins can be used to abstract out sub-sections of templates</li><li class="fragment">Parameters can be used to perform conditional statements, or to be used in the HTML itself\n(i.e. controller names or binding values)</li></ul></section><section><h2>Include Statements</h2><ul><li class="fragment">Includes act as an import of another Pug file</li><li class="fragment">Mixins in the file become available for reuse</li><li class="fragment">Full Pug templates can be nested in other template files using include</li></ul></section><section><h2>Inheritence</h2><ul><li class="fragment">Similar to include, but allows for customization of "blocks"</li><li class="fragment">Blocks are declared in the template and implemented by the "extending" template</li><li class="fragment">Blocks can be optionally implemented</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Other Features</h2></section><section><ul><li>Filters (transpiling in the template, think Markdown)</li><li class="fragment">Inline Elements</li><li class="fragment">Comment Syntax (can be compiled into the template, or excluded)</li><li class="fragment">Conditionals</li><li class="fragment">Interopolation</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Benefits</h2></section><section><ul><li>Code reuse</li><li class="fragment">Concise templating</li><li class="fragment">Community support</li><li class="fragment">Flexibility</li><li class="fragment">CSS Selectors map to templates easier</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Downsides</h2></section><section><ul><li>Fragmentation</li><li class="fragment">Another dependency</li><li class="fragment">Another syntax to learn</li><li class="fragment">Have to execute a compile function to get the template*</li></ul><p class="fragment">* - This can be addressed by using <a href="https://www.npmjs.com/package/pug-html-loader">the pug html loader</a></p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>More Information</h2><div><a class="fragment" href="http://pugjs.org">PugJS.org</a></div><div><a class="fragment" href="http://youtube.com/m3fawner">My YouTube channel (shameless plug)</a></div></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Yarn</h2></section></section>'+(null==(t=n(156).call(this,e))?"":t)+(null==(t=n(157).call(this,e))?"":t)+(null==(t=n(158).call(this,e))?"":t)+(null==(t=n(159).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>What is Yarn?</h2></section><section><p>Yarn is a Javscript package manager.</p><p class="fragment">Replaces NPM functionality</p><p class="fragment">It is built on top of NPM\'s registry, so packages published to NPM are available on Yarn</p><p class="fragment">Developed by Facebook, Google, Tilde, and Exponent.</p><p class="fragment">It is technically still in pre-release, as its version is 0.18.x</p></section><section><h2>Side Note</h2><p>Their website artwork is done by the Reddit user "ShittyWaterColour", so that\'s cool.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Getting Started</h2></section><section><ol><li>NPM install Yarn globally</li><li class="fragment">Execute <code>yarn</code> in an existing project, or <code>yarn init</code> in a new one</li></ol></section><section><p>Yarn init will generate a package.json that follows the same API.</p><p class="fragment">When the yarn command is executed, it will pull down the packages and perform any of the \nNPM hooks.</p><p class="fragment">It will also generate a <code>yarn.lock</code> file. More on this later.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Why use Yarn over NPM?</h2></section><section><h2>1. It\'s faster. Much faster.</h2><ul><li class="fragment">Higher performing Cache</li><li class="fragment">Yarn Lock vs NPM Shrinkwrap</li><li class="fragment">Parallel Processing</li></ul><a class="fragment" href="https://yarnpkg.com/en/compare">For specific time comparisons</a><p class="fragment">NPM only outperforms Yarn in 2 scenarios, and only by a few seconds</p></section><section><h2>2. It builds a lockfile automatically</h2><p class="fragment">Lock files explicitly state what version is being used by an application that can have varying version numbers.</p><p class="fragment">These lock files can be checked into the source repo tHen guarantee versions between machines</p><p class="fragment">NPM has this ability, but it requires the installation of another package called "NPM Shrinkwrap"</p></section><section><h2>3. Adds security</h2><p class="fragment">It performs checksums against the registry to ensure package authenticity.</p></section><section><h2>4. Effortless Upgrade</h2><p class="fragment">As mentioned earlier, yarn can be used in an existing NPM project without any difference.</p></section><section><h2>5. Cleaner output</h2></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Slight API Differences between NPM and Yarn</h2></section><section><ul><li>yarn add - replaces npm install</li><li class="fragment">yarn remove - replaces npm uninstall</li><li class="fragment">yarn global - replaces npm install -g</li><li class="fragment">yarn add -dev - replaces npm install --save-dev</li></ul></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Angular Component Lifecycle Hooks</h2></section></section>'+(null==(t=n(162).call(this,e))?"":t)+(null==(t=n(163).call(this,e))?"":t)+(null==(t=n(164).call(this,e))?"":t)+(null==(t=n(165).call(this,e))?"":t)+(null==(t=n(166).call(this,e))?"":t)+(null==(t=n(167).call(this,e))?"":t)+(null==(t=n(168).call(this,e))?"":t)+(null==(t=n(169).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>$onChanges</h2></section><section><ul><li>Performed when references change for bindings (via one way bindings and literal evaluations)</li><li class="fragment">Passes change object containing current, previous, and "isFirstChange" function</li><li class="fragment">Very useful for creating pseudo-immutability</li></ul></section><section><p>Changes objects only contain the properties of those bindings that are changed</p><p class="fragment">So if "user" and "application" objects are one way bound, and "user" reference changes, the change object would\nhave only "user".</p></section><section><p><code>isFirstChange</code> is a function assigned onto the change object.</p><p class="fragment">It will return true when the reference goes from undefined to defined and false then on out.</p></section><section><h2>Helpful Hint</h2><p>Create a clone of bindings in $onChanges and ensure it is a deep clone</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>$onInit</h2></section><section><ul><li>Useful for initializing values necessary for the view</li><li class="fragment">Ensures availability of bindings and application state</li><li class="fragment">Centralizes initialization of view state</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>$doCheck</h2></section><section><ul><li>Customized implementation of $onChanges</li><li class="fragment">Can be more fine grained when acting upon changes (checking nested properties of a binding)</li><li class="fragment">Executed on every digest cycle, so be wary</li><li class="fragment">Should not need an $onChanges when utilizing $doCheck</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>$postLink</h2></section><section><ul><li>Equivalent to directive\'s link property</li><li class="fragment">Gives access to the element after the link has been made (DOM to component)</li></ul></section><section><h2>Warning!</h2><p>This is not to be used for directive-like behavior</p><p class="fragment">DOM manipulation should be minimal in components and $postLink is most likely not the right approach</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>$onDestroy</h2></section><section><ul><li>Equivalent to listening for the $destroy event on $scope</li><li class="fragment">Called when the element $scope is destroyed</li><li class="fragment">Useful for cleaning up event listeners and non-Angular logic/resources</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Constructor vs. $onInit</h2></section><section><p>I suggest using <a href="https://www.youtube.com/watch?v=uRuP53zTHCQ">ES6 Classes</a> for <a href="https://medium.com/@angular_evan/es6-classes-and-angular-b5ae6647278d">angular controllers</a></p><p class="fragment">Constructors are made available to classes, but should not be used for much in Angular controllers</p></section><section><h2>What belongs in the Constructor?</h2><ul><li class="fragment">Assignments of Injected objects onto the class instance</li><li class="fragment">Initialization of any constant values that do not depend on Angular</li></ul></section><section><h2>What belongs in $onInit?</h2><ul><li class="fragment">Initialization of values based on values or bindings from Angular</li><li class="fragment">One time service calls (think fetching of resources)</li><li class="fragment">Instantiation of display objects and default values for fields</li></ul></section><section><h2>Why does this matter?</h2><p class="fragment">$onInit ensures that parent components are available at the time the component is added to the DOM</p><p class="fragment">This means that components that are <code>require</code>\'d (use of require property) by the component are ready</p><p class="fragment">It also cleans up class notation, separating what is required for the controller to function (constructor), and what is required by the view ($onInit)</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>$onChanges fires before $onInit, why?</h2></section><section><p>$onInit executing after $onChanges may seem odd...</p><p class="fragment">But to me, it makes sense.</p><p class="fragment">Why?</p></section><section><p>$onChanges is typically used to manipulate binding data</p><p class="fragment">One usually creates a copy of the object and molds it into a given structure that is useful for the component.</p><p class="fragment">Component helper functions are expecting this format to have occurred</p></section><section><h2>A practical Example</h2><pre class="fragment">class {\n  $onInit() {\n    this.user = massageData(this.boundUser);\n  }\n  $onChanges({ boundUser }) {\n    this.user = massageData(boundUser.currentValue);\n  }\n  massageData(data = {}) {\n    return {\n      displayName: `${data.firstName} ${data.lastName}`,\n      age: data.age\n    };\n  }\n}</pre></section><section><p>If $onInit fires first, we have to massage the data to build <code>displayName</code>.</p><p class="fragment">However, since $onChanges fires first, <code>this.user</code> is already set as the response of massageData.</p><p class="fragment">Thus, we can eliminate $onInit entirely from the controller.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>More in depth Discussion</h2></section><section><h2>Todd Motto</h2><p>Todd Motto wrote a very, very in depth article <a href="https://toddmotto.com/angular-1-5-lifecycle-hooks">here</a>.</p></section><section><h2>Angular Docs</h2><p>The angular documentation is <a href="https://docs.angularjs.org/guide/component">on components</a> explains the lifecycle hooks, as well.</p></section><section><h2>CodePen</h2><p>I created a <a href="http://codepen.io/m3fawner/pen/pRjvym">CodePen.io</a> example to see when each are fired and in what order, as well as the event order</p></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Dyson</h2></section></section>'+(null==(t=n(172).call(this,e))?"":t)+(null==(t=n(173).call(this,e))?"":t)+(null==(t=n(174).call(this,e))?"":t)+(null==(t=n(175).call(this,e))?"":t)+(null==(t=n(176).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Dyson Overview</h2></section><section><ul><li>Service Mocking framework</li><li class="fragment">Built on Express</li><li class="fragment">Supports Static & Dynamic responses</li><li class="fragment">Extremely easy to set up</li></ul></section><section><h2>About the Package</h2><div><a class="fragment" href="https://github.com/webpro/dyson">Github Page</a></div><div><a class="fragment" href="emailto:lars@webpro.nl">Lars Kappert</a></div></section><section><h2>How it works</h2><ul><li class="fragment">Generates end points using the configurations in each of the HTTP verb folders</li><li class="fragment">Listens at a particular port (3000 unless configured), for requests and performs a URL match</li><li class="fragment">When a URL match occurs, the request generates a response according to the configuration</li><li class="fragment">We\'ll cover how this works in more detail in a later video</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Installation</h2></section><section><p>As it\'s an NPM module, it\'s as simple as globally installing the package</p><pre class="fragment">npm install -g dyson</pre></section><section><p>Optionally, you can install the generators that produce mock data for names, addresses and the like.</p><pre class="fragment">npm install --save-dev dyson-generators</pre></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Folder Structure</h2></section><section><p>Generating a new Dyson project is easy!</p><ol><li class="fragment">Create a directory that you intended to store mocks in</li><li class="fragment">Create each of the end points you\'ll need as directories (GET, DELETE, POST, PUT, OPTIONS)</li><li class="fragment">Optionally add a <code>dyson.json</code> file for configuration of Dyson, more on this later</li></ol></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Basic End Point Configuration</h2></section><section><p>Each file should have a single <code>module.exports</code>, exporting a configuration object</p><pre class="fragment">module.exports = {\n    // Configuration properties\n};</pre></section><section><h2>Configuration properties</h2><ul><li class="fragment">path - The URL to be listened to for requests</li><li class="fragment">template - Function or object to be returned as a response</li><li class="fragment">method - </li></ul><p class="fragment">With these two properties, a completely static set of mocks can be made.</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Dynamic Responses</h2></section><section><p>Dyson allows for highly customizable responses</p></section><section><h2>Dynamic Templates</h2><pre class="fragment">template: function(pathParams, queryVariables, postBody)</pre><p class="fragment">Returned object is sent as a response</p><p class="fragment">If a promise is returned, the resolved promise value is sent</p></section><section><h2>Path Variables</h2><p class="fragment">Path variables can be added to the path by adding <code>:variableName</code> to the path</p><p class="fragment">These are portions of the URL that can be changed dynamically and Dyson will still match the URL</p></section><section><h2>Query Variables</h2><p class="fragment">As with any URL, query parameters are optionally matched by Dyson and are made available to the \ndynamic functions in a similar fashion to path variables.</p></section><section><h2>Post Body</h2><p class="fragment">In post requests, the body of the request is made available, as well</p></section><section><h2>HTTP Headers</h2><p class="fragment">The raw request and response objects can be accessed via the render property</p><p class="fragment">These are the Express objects, so they follow that API</p></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Angular Modules</h2></section></section>'+(null==(t=n(179).call(this,e))?"":t)+(null==(t=n(180).call(this,e))?"":t)+(null==(t=n(181).call(this,e))?"":t)+(null==(t=n(182).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Introduction to Modules</h2></section><section><ul><li>Starting point of the application</li><li class="fragment">One root module represents the entry point</li><li class="fragment">Dependency modules are initialized when the module is bootstrapped</li><li class="fragment">Constructs get created as modules are initialized</li><li class="fragment">Constructs are declared on the module</li><li class="fragment">(Services, Factories, Controllers, Components, etc)</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>Setter Notation</h2></section><section><h4>app.js</h4><pre>import Main from './main/';\nangular.module('ew', [ Main ]);</pre><h4>main/index.js</h4><pre>import MainComponent from './main.component';\nimport MainConfig from './main.config';\nimport AngularUIRouter from 'angular-ui-router';\nangular.module('ew.main', [AngularUIRouter])\n  .component('main', MainComponent);\n  .config(MainConfig);</pre></section><section><p>When module <code>ew</code> is bootstrapped, the <code>ew.main</code> module gets executed.</p><p class=\"fragment\">UI-Router, as a dependency, also gets initialized.</p><p class=\"fragment\">The config function gets executed, setting up the routes and any additional configuration necessary.</p></section></section>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Getter Notation</h2></section><section><pre>angular.module(\'ew\');</pre><p class="fragment">Retrieves the module from angular\'s module collection</p><p class="fragment">Additional constructs can be added at this point</p></section><section><p>Please note, this practice is no longer necessary in a world of ES6 modules.</p><p class="fragment">Modules should be declared in one file, and have all constructs declared on that module</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Bootstrapping</h2></section><section><p>Bootstrapping is the act of initializing an angular application</p><p class="fragment">Starting with an entry module, it will initialize all dependencies</p><p class="fragment">Services and the like get constructed as per their construction behavior</p><p class="fragment">ng-app directive, or angular.bootstrap can be used</p></section><section><h2>angular.bootstrap</h2><pre>angular.bootstrap(document.querySelector(\'body\'), [\'ew\']);</pre><p class="fragment">This will initialize <code>ew</code> on the body element</p><p class="fragment">angular.bootstrap is useful for scenarios where there is some dependency external to \nangular that needs to execute prior to bootstrapping</p></section><section><h2>ng-app</h2><p class="fragment">This directive goes on an HTML element, and will bootstrap to that element</p><pre class="fragment">&lt;body ng-app="ew"&gt;\n  ...\n&lt;/body&gt;</pre><p class="fragment">ng-app is typically used, as it\'s a little cleaner and more declarative in the applications views</p></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Angular Modules Best Practices</h2></section></section>'+(null==(t=n(185).call(this,e))?"":t)+(null==(t=n(186).call(this,e))?"":t)+(null==(t=n(187).call(this,e))?"":t)+(null==(t=n(188).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Naming Conventions</h2></section><section><p>Naming typically is representative of its location in the project</p><pre class="fragment">\\ main\n  \\ - index.js\n  \\ child\n    \\ - index.js</pre><p class="fragment">The child should be named "main.child", in this instance</p></section><section><p>The root module should be the name of the application</p><p class="fragment">Sometimes, it\'s useful to group applications by entity.</p><p class="fragment">For instance, my application modules typically start with m3fawner or ew</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Module File Naming</h2></section><section><p>Depends on build tools</p><p class="fragment">For non-webpack/ES6, I suggest using "*.module.js"</p><p class="fragment">With webpack, I use index.js</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>Utilizing ES6 Modules</h2></section><section><h4>app.js</h4><pre>import ChildDependency from './child';\n\nangular.module('ew', [ ChildDependency ]);</pre><h4>child/index.js</h4><pre>export default angular.module('ew.child', [])\n  .name;</pre></section><section><ul><li>Much cleaner code</li><li class=\"fragment\">Less likely to override modules by using the setter method twice</li><li class=\"fragment\">Module name exports allow for free refactoring of module names, if necessary</li></ul></section></section>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Dependency Declaration</h2></section><section><p>It is extremely important to declare every dependency</p><p class="fragment">Modules are loaded in a non-intuitive way</p><p class="fragment">Accessing different parts of the app in a different order can cause failures, if not declared properly.</p></section></section>'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>Dynamically Loaded Angular Modules</h2></section></section>'+(null==(t=n(191).call(this,e))?"":t)+(null==(t=n(192).call(this,e))?"":t)+(null==(t=n(193).call(this,e))?"":t)+(null==(t=n(194).call(this,e))?"":t)+(null==(t=n(195).call(this,e))?"":t)+(null==(t=n(196).call(this,e))?"":t)+(null==(t=n(197).call(this,e))?"":t)+(null==(t=n(4).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>The Why</h2></section><section><ul><li>Bundle Size</li><li class="fragment">Security</li><li class="fragment">Dynamic Deploys</li><li class="fragment">Performance Gains</li></ul></section><section><h2>Bundle Size</h2><ul><li class="fragment">Not only are the modules\' source dynamic, but the bundle specific dependencies are, as well</li><li class="fragment">Original project was 1 bundle, 16 MB in size. Now have 6 bundles, averaging to about 1.5 MB a piece</li><li class="fragment">Modules can be loaded as-needed</li></ul></section><section><h2>Security</h2><ul><li class="fragment">Can dynamically pull in modules based on security roles</li><li class="fragment">Helps eliminate coding errors where developers do not restrict routes by security</li></ul></section><section><h2>Dynamic Deploys</h2><p class="fragment">Allowed to push sub-modules without the need to push all features</p></section><section><h2>Performance Gains</h2><ul><li class="fragment">More bundles</li><li class="fragment">CommonsChunkPlugin, among others</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>How Angular loads Modules</h2></section><section><ul><li class="fragment">Performed synchronously</li><li class="fragment">Cannot override modules asynchronously</li><li class="fragment">Executes services, factories, providers, etc, then performs config and run blocks</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Problems with Dynamic Modules</h2></section><section><ul><li>Dependencies may not support it, either (i.e. $ngRedux)</li><li class="fragment">Routing and other configurations expect a synchronous definition of states</li><li class="fragment">Determining module requirements on refresh of the application</li><li class="fragment">Choosing a recovery point</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Initial Approaches, Problems, Findings</h2></section><section><h3>Multiple ng-app directives/bootstraps</h3><h5 class="fragment">Pros</h5><ul><li class="fragment">Simplistic</li><li class="fragment">No need for executing internals of angular</li><li class="fragment">Clean Isolation</li></ul><h5 class="fragment">Cons</h5><ul><li class="fragment">Two or more completely disjointed apps</li><li class="fragment">Must access $injectors and manually copy state from one to another</li></ul></section><section><h3>Removing the DOM element and re-bootstrapping</h3><h5 class="fragment">Pros</h5><ul><li class="fragment">Can completely rely on angular to initialize the new modules</li><li class="fragment">Zero additional work compared to the last approach</li></ul><h5 class="fragment">Cons</h5><ul><li class="fragment">Resets the application state entirely</li></ul></section><section><h3>Manually Invoking angular Black Magic</h3><h5 class="fragment">Pros</h5><ul><li class="fragment">No need to do any data transfer or state-recovery</li><li class="fragment">Rather simplistic code, isolated in one class</li></ul><h5 class="fragment">Cons</h5><ul><li class="fragment">Must inject many providers ($compile, $filter, etc) to initialize constructs</li><li class="fragment">Brittle, as it requires angular to work a specific way</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>The Solution</h2></section><section><h2>The Angular Black Magic</h2><ul><li class="fragment">Iterate over modules & dependency modules</li><li class="fragment">Must construct all services and the like, to ensure providers are available for config/run</li><li class="fragment">Once the dependency tree has been traversed, and constructs initialized, perform config and run blocks</li></ul></section><section><h2>Our Dependencies</h2><ul><li class="fragment">$ngRedux - Required a solution involving replacing the main reducer function</li><li class="fragment">ui-router - Needed to dynamically determine state based on the path, or the name of the state attempting to be loaded</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>The Code</h2></section><section><h2>Set the Root Application Module</h2><ul><li class="fragment">Marks all dependencies as alread initialized</li><li class="fragment">Keeps a reference to dynamically push dependencies to the root module</li></ul></section><section><h2>Load Module</h2><ul><li class="fragment">Push the dependency\'s Module name to the required collection</li><li class="fragment">Initialize the module</li><li class="fragment">Perform all configs/runs of that module and its dependencies</li></ul></section><section><h2>Module Initialization</h2><ul><li class="fragment">Iterate over the _invokeQueue and initialize constructs</li><li class="fragment">Push configs and runs to be executed post-initialization</li><li class="fragment">Mark it as initialized</li><li class="fragment">Initialize dependency modules</li></ul></section><section><h2>Constructing Services and the Like</h2><pre class="fragment">const provider = this.providers[providerName];\nprovider[providerMethod].apply(provider, construct);</pre><p class="fragment">All providers necessary are required to be assigned onto the class in order for this to work (BRITTLE)</p></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+="<section><section><h2>Implementation</h2></section><section><h4>Handling cross-module routing</h4><pre>$rootScope.$on('$stateNotFound', (event, { to, toParams }) => {\n    event.preventDefault();\n    childDependencyLoader._initializeLoader($injector);\n    if(!childDependencyLoader.hasLoadedDependencyForState(to)) {\n        childDependencyLoader.loadChildDependencyForState(to, toParams);\n    }\n});</pre></section><section><h4>Handling page refreshes</h4><pre>$urlRouterProvider.otherwise(($injector, $location) => {\n    const path = $location.path();\n    childDependencyLoader._initializeLoader($injector);\n    if (path !== '/' && !childDependencyLoader.hasLoadedDependencyForPath(path)) {\n        childDependencyLoader.loadChildDependencyForPath(path);\n        return '/loading';\n    }\n    return '/login';\n});</pre></section><section><h4>Performing the actual sub-module loading</h4><pre>loadCustomerCare() {\n    return new Promise((resolve) => {\n        require.ensure(['invision-customercare'], (require) => {\n            const { InvisionCustomerCareModule, CustomerCareModuleReducers } = require('invision-customercare');\n            dynamicAngularModuleLoader.loadModule(InvisionCustomerCareModule);\n            dynamicReducerLoader.injectReducer({\n                customercare: combineReducers(CustomerCareModuleReducers)\n            });\n            resolve();\n        });\n    });\n}</pre></section></section>"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,o=n(1),i=(s=o)&&s.__esModule?s:{default:s};t.default=i.default},function(e,t,n){n(0);e.exports=function(e){var t,s="";return s=s+'<div class="reveal"><div class="slides"><section><section><img src="assets/Full Logo.png"><h2>HSA 101</h2></section></section>'+(null==(t=n(200).call(this,e))?"":t)+(null==(t=n(201).call(this,e))?"":t)+(null==(t=n(202).call(this,e))?"":t)+(null==(t=n(203).call(this,e))?"":t)+"</div></div>"}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>What is an HSA?</h2><ul><li class="fragment">Health Savings Account</li><li class="fragment">Intended to help save for High Deductible health insurance plans</li><li class="fragment">Triple Tax advantaged account (tax deductible, tax free growth, tax free withdrawal)</li><li class="fragment">Can be used to reimburse valid medical expenses (see IRS listing)</li><li class="fragment">2017: $3400 single / $6750 family</li><li class="fragment">2018: $3450 single / $6900 family</li></ul></section><section><h2>Why use an HSA?</h2><ul><li class="fragment">Tax Savings ($850 for single, $1687.50 for family assuming 25% bracket)</li><li class="fragment">Encourages saving for medical expenses</li><li class="fragment">Have additional benefits in retirement on top of normal usage</li></ul></section><section><h2>Misc. FAQs</h2><ul><li class="fragment">Unlike a Flexible Spending Account, your money remains yours at the end of the year.</li><li class="fragment">Valid bills can be paid out of the HSA at any point in time if incurred after the HSA\nwas established.</li><li class="fragment">Unlike a 401k, employer contributions count towards employee contributions.</li><li class="fragment">Withdrawing before retirement age & without expenses incurs income taxes and a 20% penalty</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Investing your HSA</h2></section><section><ul><li>Money in HSAs can typically be invested</li><li class="fragment">Most HSAs require a minimum cash amount</li><li class="fragment">Most allow for only mutual fund investment options, though limited to only a few options</li></ul></section><section><h2>Benefits</h2><ul><li class="fragment">Tax free growth</li><li class="fragment">$6750 at 7% market growth is $89,953 at retirement age (28 to 65)</li><li class="fragment">$6750 annually at 7% market is $1,118,851 on $249,750 principal</li></ul></section><section><h2>Word of Caution!</h2><ul><li class="fragment">If you view your HSA as an emergency fund, invest it in safer options</li><li class="fragment">Just like any investment, you may lose your funds</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Retirement Impacts</h2></section><section><ul><li>HSA can be treated as a traditional IRA after full retirement age</li><li class="fragment">Withdrawals for non-medical expenses are treated as income</li><li class="fragment">Due to retro-active medical bills rule, waiting to reimburse medical expenses until retirement allows\ncompletely tax free withdrawls from the HSA.</li><li class="fragment">If withdrawn without medical expenses, income taxes apply</li></ul></section></section>'}},function(e,t,n){n(0);e.exports=function(e){var t="";return t+='<section><section><h2>Is an HSA right for you?</h2></section><section><h2>Qualifications</h2><ul><li class="fragment">You\'re on a High Deductible Health Plan</li><li class="fragment">You\'re not covered by any other health coverage (see IRS rules)</li><li class="fragment">You cannot be on medicare</li><li class="fragment">You are not being claimed as a dependent</li></ul></section><section><h2>The Math</h2><h4>HDHP (Family)</h4><ul><li>Premiums: $6550.08 ($272.92 bi-weekly)</li><li>HSA Contributions: $1000</li><li>Deductible Max: $4000</li><li>Out of Pocket Max: $6000</li><li>Tax Savings (25% bracket, $5750 personal contributions): $1437.50</li><li>Net (w/o tax savings): $11550.08 (at max), $9550.08 (deductible met), $5550.08 (at min)</li><li>Net (w/ tax savings): $10112.58 (at max), $8112.58 (deductible met), $4112.58 (at min)</li></ul></section><section><h4>Low Deductible (Family)</h4><ul><li>Premiums: $4800 ($200 bi-weekly)</li><li>Deductible Reimbursement: $1000</li><li>Deductible Max: $2000</li><li>Out of Pocket Max: $8000</li><li>Net: $11800 (max), $5800 (deductible met), $4800 (at min)</li></ul></section><section><h4>Comparison</h4><ul><li>HDHP Net (w/o tax savings): $11550.08 (at max), $9550.08 (deductible met), $5550.08 (at min)</li><li>HDHP Net (w/ tax savings): $10112.58 (at max), $8112.58 (deductible met), $4112.58 (at min)</li><li>LDHP Net: $11800 (max), $5800 (deductible met), $4800 (at min)</li></ul></section><section><h2>Most Likely to Benefit</h2><ul><li class="fragment">Healthy individuals</li><li class="fragment">Younger people (compounding growth of funds)</li><li class="fragment">People without children (see calculations on deductibles being met)</li><li class="fragment">Those able to contribute to an HSA (have available capital)</li></ul></section></section>'}}]);
//# sourceMappingURL=bundle.js.map